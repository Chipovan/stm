
Led_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000784c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080079d4  080079d4  000179d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a48  08007a48  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a50  08007a50  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08007a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020180  2**0
                  CONTENTS
 10 .bss          00001c10  20000180  20000180  00020180  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d90  20001d90  00020180  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b640  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eb5  00000000  00000000  0003b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  0003f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001050  00000000  00000000  00040898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e29  00000000  00000000  000418e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019891  00000000  00000000  00066711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca6dd  00000000  00000000  0007ffa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014a67f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004908  00000000  00000000  0014a6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079bc 	.word	0x080079bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	080079bc 	.word	0x080079bc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	4b72      	ldr	r3, [pc, #456]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a71      	ldr	r2, [pc, #452]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b6f      	ldr	r3, [pc, #444]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0310 	and.w	r3, r3, #16
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	4b6b      	ldr	r3, [pc, #428]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a6a      	ldr	r2, [pc, #424]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b68      	ldr	r3, [pc, #416]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b64      	ldr	r3, [pc, #400]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a63      	ldr	r2, [pc, #396]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b61      	ldr	r3, [pc, #388]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b5d      	ldr	r3, [pc, #372]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a5c      	ldr	r2, [pc, #368]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b5a      	ldr	r3, [pc, #360]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a55      	ldr	r2, [pc, #340]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b53      	ldr	r3, [pc, #332]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b4f      	ldr	r3, [pc, #316]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a4e      	ldr	r2, [pc, #312]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b4c      	ldr	r3, [pc, #304]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2108      	movs	r1, #8
 8000592:	4849      	ldr	r0, [pc, #292]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 8000594:	f000 feda 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2101      	movs	r1, #1
 800059c:	4847      	ldr	r0, [pc, #284]	; (80006bc <MX_GPIO_Init+0x1ec>)
 800059e:	f000 fed5 	bl	800134c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005a2:	2200      	movs	r2, #0
 80005a4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005a8:	4845      	ldr	r0, [pc, #276]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 80005aa:	f000 fecf 	bl	800134c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ae:	2308      	movs	r3, #8
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	4619      	mov	r1, r3
 80005c4:	483c      	ldr	r0, [pc, #240]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 80005c6:	f000 fd25 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	4836      	ldr	r0, [pc, #216]	; (80006bc <MX_GPIO_Init+0x1ec>)
 80005e2:	f000 fd17 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005e6:	2308      	movs	r3, #8
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005f6:	2305      	movs	r3, #5
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	482e      	ldr	r0, [pc, #184]	; (80006bc <MX_GPIO_Init+0x1ec>)
 8000602:	f000 fd07 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000606:	2301      	movs	r3, #1
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800060a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	482a      	ldr	r0, [pc, #168]	; (80006c4 <MX_GPIO_Init+0x1f4>)
 800061c:	f000 fcfa 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000620:	2304      	movs	r3, #4
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 031c 	add.w	r3, r7, #28
 8000630:	4619      	mov	r1, r3
 8000632:	4825      	ldr	r0, [pc, #148]	; (80006c8 <MX_GPIO_Init+0x1f8>)
 8000634:	f000 fcee 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800064a:	2305      	movs	r3, #5
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	4619      	mov	r1, r3
 8000654:	481c      	ldr	r0, [pc, #112]	; (80006c8 <MX_GPIO_Init+0x1f8>)
 8000656:	f000 fcdd 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800065a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800065e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 8000674:	f000 fcce 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000678:	2320      	movs	r3, #32
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 800068c:	f000 fcc2 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000694:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 80006a6:	f000 fcb5 	bl	8001014 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3730      	adds	r7, #48	; 0x30
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40020800 	.word	0x40020800
 80006c0:	40020c00 	.word	0x40020c00
 80006c4:	40020000 	.word	0x40020000
 80006c8:	40020400 	.word	0x40020400

080006cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f000 fe53 	bl	80013b4 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 f9ba 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200003c0 	.word	0x200003c0
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <HAL_I2C_MspInit+0x84>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d12c      	bne.n	80007a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000766:	f44f 7310 	mov.w	r3, #576	; 0x240
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076c:	2312      	movs	r3, #18
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000770:	2301      	movs	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000778:	2304      	movs	r3, #4
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <HAL_I2C_MspInit+0x8c>)
 8000784:	f000 fc46 	bl	8001014 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 8000792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40005400 	.word	0x40005400
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020400 	.word	0x40020400

080007b8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_I2S3_Init+0x54>)
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <MX_I2S3_Init+0x58>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_I2S3_Init+0x54>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_I2S3_Init+0x54>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_I2S3_Init+0x54>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <MX_I2S3_Init+0x54>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_I2S3_Init+0x54>)
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <MX_I2S3_Init+0x5c>)
 80007e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_I2S3_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_I2S3_Init+0x54>)
 80007f8:	f000 ff20 	bl	800163c <HAL_I2S_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000802:	f000 f943 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000414 	.word	0x20000414
 8000810:	40003c00 	.word	0x40003c00
 8000814:	00017700 	.word	0x00017700

08000818 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	; 0x38
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a31      	ldr	r2, [pc, #196]	; (8000908 <HAL_I2S_MspInit+0xf0>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d15a      	bne.n	80008fe <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000848:	2301      	movs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800084c:	23c0      	movs	r3, #192	; 0xc0
 800084e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	4618      	mov	r0, r3
 800085a:	f003 f973 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000864:	f000 f912 	bl	8000a8c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <HAL_I2S_MspInit+0xf4>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <HAL_I2S_MspInit+0xf4>)
 8000872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <HAL_I2S_MspInit+0xf4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_I2S_MspInit+0xf4>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a1f      	ldr	r2, [pc, #124]	; (800090c <HAL_I2S_MspInit+0xf4>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <HAL_I2S_MspInit+0xf4>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_I2S_MspInit+0xf4>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <HAL_I2S_MspInit+0xf4>)
 80008aa:	f043 0304 	orr.w	r3, r3, #4
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_I2S_MspInit+0xf4>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0304 	and.w	r3, r3, #4
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008bc:	2310      	movs	r3, #16
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008cc:	2306      	movs	r3, #6
 80008ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d4:	4619      	mov	r1, r3
 80008d6:	480e      	ldr	r0, [pc, #56]	; (8000910 <HAL_I2S_MspInit+0xf8>)
 80008d8:	f000 fb9c 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008dc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008ee:	2306      	movs	r3, #6
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	4619      	mov	r1, r3
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <HAL_I2S_MspInit+0xfc>)
 80008fa:	f000 fb8b 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008fe:	bf00      	nop
 8000900:	3738      	adds	r7, #56	; 0x38
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40003c00 	.word	0x40003c00
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000
 8000914:	40020800 	.word	0x40020800

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b5b0      	push	{r4, r5, r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 f9d1 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f849 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000926:	f7ff fdd3 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800092a:	f7ff fecf 	bl	80006cc <MX_I2C1_Init>
  MX_I2S3_Init();
 800092e:	f7ff ff43 	bl	80007b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000932:	f000 f8b1 	bl	8000a98 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000936:	f006 fad7 	bl	8006ee8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 800093a:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <main+0x98>)
 800093c:	1d3c      	adds	r4, r7, #4
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	8023      	strh	r3, [r4, #0]
  uint16_t TestLength =strlen((char*)Test)*sizeof(char);
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fc3c 	bl	80001c8 <strlen>
 8000950:	4603      	mov	r3, r0
 8000952:	82fb      	strh	r3, [r7, #22]
  HAL_Delay(2000);
 8000954:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000958:	f000 fa26 	bl	8000da8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	CDC_Transmit_FS(Test, TestLength);
 800095c:	8afa      	ldrh	r2, [r7, #22]
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f006 fb7e 	bl	8007064 <CDC_Transmit_FS>
	HAL_Delay(100);
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	f000 fa1d 	bl	8000da8 <HAL_Delay>
	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_12);
 800096e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <main+0x9c>)
 8000974:	f000 fd03 	bl	800137e <HAL_GPIO_TogglePin>
	HAL_Delay (100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f000 fa15 	bl	8000da8 <HAL_Delay>
	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_13);
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <main+0x9c>)
 8000984:	f000 fcfb 	bl	800137e <HAL_GPIO_TogglePin>
	HAL_Delay (100);
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f000 fa0d 	bl	8000da8 <HAL_Delay>
	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_14);
 800098e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000992:	4808      	ldr	r0, [pc, #32]	; (80009b4 <main+0x9c>)
 8000994:	f000 fcf3 	bl	800137e <HAL_GPIO_TogglePin>
	HAL_Delay (100);
 8000998:	2064      	movs	r0, #100	; 0x64
 800099a:	f000 fa05 	bl	8000da8 <HAL_Delay>
	HAL_GPIO_TogglePin (GPIOD, GPIO_PIN_15);
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <main+0x9c>)
 80009a4:	f000 fceb 	bl	800137e <HAL_GPIO_TogglePin>
	HAL_Delay (100);
 80009a8:	2064      	movs	r0, #100	; 0x64
 80009aa:	f000 f9fd 	bl	8000da8 <HAL_Delay>
	CDC_Transmit_FS(Test, TestLength);
 80009ae:	e7d5      	b.n	800095c <main+0x44>
 80009b0:	080079d4 	.word	0x080079d4
 80009b4:	40020c00 	.word	0x40020c00

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 fff0 	bl	80079ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <SystemClock_Config+0xcc>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a27      	ldr	r2, [pc, #156]	; (8000a84 <SystemClock_Config+0xcc>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b25      	ldr	r3, [pc, #148]	; (8000a84 <SystemClock_Config+0xcc>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <SystemClock_Config+0xd0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a21      	ldr	r2, [pc, #132]	; (8000a88 <SystemClock_Config+0xd0>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b1f      	ldr	r3, [pc, #124]	; (8000a88 <SystemClock_Config+0xd0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a36:	2307      	movs	r3, #7
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fc20 	bl	8003284 <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a4a:	f000 f81f 	bl	8000a8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a4e:	230f      	movs	r3, #15
 8000a50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a52:	2302      	movs	r3, #2
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fe81 	bl	8003774 <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a78:	f000 f808 	bl	8000a8c <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3750      	adds	r7, #80	; 0x50
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <MX_SPI1_Init+0x64>)
 8000a9e:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <MX_SPI1_Init+0x68>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_SPI1_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_SPI1_Init+0x64>)
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_SPI1_Init+0x64>)
 8000aea:	f003 f96b 	bl	8003dc4 <HAL_SPI_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000af4:	f7ff ffca 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000045c 	.word	0x2000045c
 8000b00:	40013000 	.word	0x40013000

08000b04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_SPI_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_SPI_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5e:	23e0      	movs	r3, #224	; 0xe0
 8000b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6e:	2305      	movs	r3, #5
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <HAL_SPI_MspInit+0x8c>)
 8000b7a:	f000 fa4b 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40013000 	.word	0x40013000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020000 	.word	0x40020000

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <HAL_MspInit+0x4c>)
 8000ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x4c>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bd2:	2007      	movs	r0, #7
 8000bd4:	f000 f9dc 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c30:	f000 f89a 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <OTG_FS_IRQHandler+0x10>)
 8000c3e:	f001 faed 	bl	800221c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20001988 	.word	0x20001988

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c76:	490e      	ldr	r1, [pc, #56]	; (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c8c:	4c0b      	ldr	r4, [pc, #44]	; (8000cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c9a:	f7ff ffd7 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f006 fe53 	bl	8007948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca2:	f7ff fe39 	bl	8000918 <main>
  bx  lr    
 8000ca6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ca8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000cb4:	08007a58 	.word	0x08007a58
  ldr r2, =_sbss
 8000cb8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000cbc:	20001d90 	.word	0x20001d90

08000cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <HAL_Init+0x40>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <HAL_Init+0x40>)
 8000cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_Init+0x40>)
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f000 f94f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f000 f808 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf8:	f7ff ff4c 	bl	8000b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40023c00 	.word	0x40023c00

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x54>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x58>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f967 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00e      	b.n	8000d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d80a      	bhi.n	8000d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 f92f 	bl	8000fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d48:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_InitTick+0x5c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e000      	b.n	8000d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000004 	.word	0x20000004

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	200004b4 	.word	0x200004b4

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200004b4 	.word	0x200004b4

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff ffee 	bl	8000d90 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffde 	bl	8000d90 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b60      	ldr	r3, [pc, #384]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a5f      	ldr	r2, [pc, #380]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b5d      	ldr	r3, [pc, #372]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5b      	ldr	r2, [pc, #364]	; (8001324 <HAL_GPIO_Init+0x310>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a52      	ldr	r2, [pc, #328]	; (8001328 <HAL_GPIO_Init+0x314>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a51      	ldr	r2, [pc, #324]	; (800132c <HAL_GPIO_Init+0x318>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a50      	ldr	r2, [pc, #320]	; (8001330 <HAL_GPIO_Init+0x31c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <HAL_GPIO_Init+0x324>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_GPIO_Init+0x328>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	; (8001324 <HAL_GPIO_Init+0x310>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_GPIO_Init+0x334>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x334>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_GPIO_Init+0x334>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_GPIO_Init+0x334>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40021400 	.word	0x40021400
 8001340:	40021800 	.word	0x40021800
 8001344:	40021c00 	.word	0x40021c00
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	041a      	lsls	r2, r3, #16
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43d9      	mvns	r1, r3
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	400b      	ands	r3, r1
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e12b      	b.n	800161e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff f9a4 	bl	8000728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2224      	movs	r2, #36	; 0x24
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0201 	bic.w	r2, r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001416:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001418:	f002 fb80 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 800141c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a81      	ldr	r2, [pc, #516]	; (8001628 <HAL_I2C_Init+0x274>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d807      	bhi.n	8001438 <HAL_I2C_Init+0x84>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4a80      	ldr	r2, [pc, #512]	; (800162c <HAL_I2C_Init+0x278>)
 800142c:	4293      	cmp	r3, r2
 800142e:	bf94      	ite	ls
 8001430:	2301      	movls	r3, #1
 8001432:	2300      	movhi	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	e006      	b.n	8001446 <HAL_I2C_Init+0x92>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4a7d      	ldr	r2, [pc, #500]	; (8001630 <HAL_I2C_Init+0x27c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	bf94      	ite	ls
 8001440:	2301      	movls	r3, #1
 8001442:	2300      	movhi	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0e7      	b.n	800161e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4a78      	ldr	r2, [pc, #480]	; (8001634 <HAL_I2C_Init+0x280>)
 8001452:	fba2 2303 	umull	r2, r3, r2, r3
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	430a      	orrs	r2, r1
 800146c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <HAL_I2C_Init+0x274>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d802      	bhi.n	8001488 <HAL_I2C_Init+0xd4>
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	3301      	adds	r3, #1
 8001486:	e009      	b.n	800149c <HAL_I2C_Init+0xe8>
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4a69      	ldr	r2, [pc, #420]	; (8001638 <HAL_I2C_Init+0x284>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	099b      	lsrs	r3, r3, #6
 800149a:	3301      	adds	r3, #1
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	495c      	ldr	r1, [pc, #368]	; (8001628 <HAL_I2C_Init+0x274>)
 80014b8:	428b      	cmp	r3, r1
 80014ba:	d819      	bhi.n	80014f0 <HAL_I2C_Init+0x13c>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1e59      	subs	r1, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ca:	1c59      	adds	r1, r3, #1
 80014cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014d0:	400b      	ands	r3, r1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <HAL_I2C_Init+0x138>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e59      	subs	r1, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e4:	3301      	adds	r3, #1
 80014e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ea:	e051      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e04f      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d111      	bne.n	800151c <HAL_I2C_Init+0x168>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e58      	subs	r0, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	440b      	add	r3, r1
 8001506:	fbb0 f3f3 	udiv	r3, r0, r3
 800150a:	3301      	adds	r3, #1
 800150c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	e012      	b.n	8001542 <HAL_I2C_Init+0x18e>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e58      	subs	r0, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	0099      	lsls	r1, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001532:	3301      	adds	r3, #1
 8001534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_I2C_Init+0x196>
 8001546:	2301      	movs	r3, #1
 8001548:	e022      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10e      	bne.n	8001570 <HAL_I2C_Init+0x1bc>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1e58      	subs	r0, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	460b      	mov	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	440b      	add	r3, r1
 8001560:	fbb0 f3f3 	udiv	r3, r0, r3
 8001564:	3301      	adds	r3, #1
 8001566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800156e:	e00f      	b.n	8001590 <HAL_I2C_Init+0x1dc>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1e58      	subs	r0, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6859      	ldr	r1, [r3, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	0099      	lsls	r1, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	fbb0 f3f3 	udiv	r3, r0, r3
 8001586:	3301      	adds	r3, #1
 8001588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	6809      	ldr	r1, [r1, #0]
 8001594:	4313      	orrs	r3, r2
 8001596:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69da      	ldr	r2, [r3, #28]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6911      	ldr	r1, [r2, #16]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68d2      	ldr	r2, [r2, #12]
 80015ca:	4311      	orrs	r1, r2
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0201 	orr.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2220      	movs	r2, #32
 800160a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	000186a0 	.word	0x000186a0
 800162c:	001e847f 	.word	0x001e847f
 8001630:	003d08ff 	.word	0x003d08ff
 8001634:	431bde83 	.word	0x431bde83
 8001638:	10624dd3 	.word	0x10624dd3

0800163c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e128      	b.n	80018a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a90      	ldr	r2, [pc, #576]	; (80018a8 <HAL_I2S_Init+0x26c>)
 8001666:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff f8d5 	bl	8000818 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2202      	movs	r2, #2
 8001672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001684:	f023 030f 	bic.w	r3, r3, #15
 8001688:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d060      	beq.n	800175c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80016a2:	2310      	movs	r3, #16
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e001      	b.n	80016ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80016a8:	2320      	movs	r3, #32
 80016aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b20      	cmp	r3, #32
 80016b2:	d802      	bhi.n	80016ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f002 fb24 	bl	8003d08 <HAL_RCCEx_GetPeriphCLKFreq>
 80016c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ca:	d125      	bne.n	8001718 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d010      	beq.n	80016f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	fbb2 f2f3 	udiv	r2, r2, r3
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f0:	3305      	adds	r3, #5
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	e01f      	b.n	8001736 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	3305      	adds	r3, #5
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	e00e      	b.n	8001736 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	3305      	adds	r3, #5
 8001734:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	4a5c      	ldr	r2, [pc, #368]	; (80018ac <HAL_I2S_Init+0x270>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	08db      	lsrs	r3, r3, #3
 8001740:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	e003      	b.n	8001764 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800175c:	2302      	movs	r3, #2
 800175e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d902      	bls.n	8001770 <HAL_I2S_Init+0x134>
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	2bff      	cmp	r3, #255	; 0xff
 800176e:	d907      	bls.n	8001780 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f043 0210 	orr.w	r2, r3, #16
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e08f      	b.n	80018a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	ea42 0103 	orr.w	r1, r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	430a      	orrs	r2, r1
 8001792:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800179e:	f023 030f 	bic.w	r3, r3, #15
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6851      	ldr	r1, [r2, #4]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6892      	ldr	r2, [r2, #8]
 80017aa:	4311      	orrs	r1, r2
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68d2      	ldr	r2, [r2, #12]
 80017b0:	4311      	orrs	r1, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6992      	ldr	r2, [r2, #24]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d161      	bne.n	8001890 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a38      	ldr	r2, [pc, #224]	; (80018b0 <HAL_I2S_Init+0x274>)
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a37      	ldr	r2, [pc, #220]	; (80018b4 <HAL_I2S_Init+0x278>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d101      	bne.n	80017e0 <HAL_I2S_Init+0x1a4>
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_I2S_Init+0x27c>)
 80017de:	e001      	b.n	80017e4 <HAL_I2S_Init+0x1a8>
 80017e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	4932      	ldr	r1, [pc, #200]	; (80018b4 <HAL_I2S_Init+0x278>)
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d101      	bne.n	80017f4 <HAL_I2S_Init+0x1b8>
 80017f0:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <HAL_I2S_Init+0x27c>)
 80017f2:	e001      	b.n	80017f8 <HAL_I2S_Init+0x1bc>
 80017f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80017f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80017fc:	f023 030f 	bic.w	r3, r3, #15
 8001800:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2b      	ldr	r2, [pc, #172]	; (80018b4 <HAL_I2S_Init+0x278>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_I2S_Init+0x1d4>
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_I2S_Init+0x27c>)
 800180e:	e001      	b.n	8001814 <HAL_I2S_Init+0x1d8>
 8001810:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001814:	2202      	movs	r2, #2
 8001816:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_I2S_Init+0x278>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d101      	bne.n	8001826 <HAL_I2S_Init+0x1ea>
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <HAL_I2S_Init+0x27c>)
 8001824:	e001      	b.n	800182a <HAL_I2S_Init+0x1ee>
 8001826:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001836:	d003      	beq.n	8001840 <HAL_I2S_Init+0x204>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e001      	b.n	800184c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001856:	4313      	orrs	r3, r2
 8001858:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001860:	4313      	orrs	r3, r2
 8001862:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800186a:	4313      	orrs	r3, r2
 800186c:	b29a      	uxth	r2, r3
 800186e:	897b      	ldrh	r3, [r7, #10]
 8001870:	4313      	orrs	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001878:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_I2S_Init+0x278>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d101      	bne.n	8001888 <HAL_I2S_Init+0x24c>
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_I2S_Init+0x27c>)
 8001886:	e001      	b.n	800188c <HAL_I2S_Init+0x250>
 8001888:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800188c:	897a      	ldrh	r2, [r7, #10]
 800188e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3720      	adds	r7, #32
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	080019b3 	.word	0x080019b3
 80018ac:	cccccccd 	.word	0xcccccccd
 80018b0:	08001ac9 	.word	0x08001ac9
 80018b4:	40003800 	.word	0x40003800
 80018b8:	40003400 	.word	0x40003400

080018bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	881a      	ldrh	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	1c9a      	adds	r2, r3, #2
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191a:	b29b      	uxth	r3, r3
 800191c:	3b01      	subs	r3, #1
 800191e:	b29a      	uxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10e      	bne.n	800194c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800193c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffb8 	bl	80018bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	b292      	uxth	r2, r2
 8001968:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	1c9a      	adds	r2, r3, #2
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001978:	b29b      	uxth	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001986:	b29b      	uxth	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10e      	bne.n	80019aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800199a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff93 	bl	80018d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d13a      	bne.n	8001a44 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d109      	bne.n	80019ec <I2S_IRQHandler+0x3a>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e2:	2b40      	cmp	r3, #64	; 0x40
 80019e4:	d102      	bne.n	80019ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffb4 	bl	8001954 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f2:	2b40      	cmp	r3, #64	; 0x40
 80019f4:	d126      	bne.n	8001a44 <I2S_IRQHandler+0x92>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b20      	cmp	r3, #32
 8001a02:	d11f      	bne.n	8001a44 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001a12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f043 0202 	orr.w	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ff50 	bl	80018e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d136      	bne.n	8001abe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d109      	bne.n	8001a6e <I2S_IRQHandler+0xbc>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a64:	2b80      	cmp	r3, #128	; 0x80
 8001a66:	d102      	bne.n	8001a6e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff45 	bl	80018f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d122      	bne.n	8001abe <I2S_IRQHandler+0x10c>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d11b      	bne.n	8001abe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a94:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f043 0204 	orr.w	r2, r3, #4
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff13 	bl	80018e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4aa2      	ldr	r2, [pc, #648]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001ae2:	4ba2      	ldr	r3, [pc, #648]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ae4:	e001      	b.n	8001aea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001ae6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a9b      	ldr	r2, [pc, #620]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001b00:	4b9a      	ldr	r3, [pc, #616]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b02:	e001      	b.n	8001b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b14:	d004      	beq.n	8001b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8099 	bne.w	8001c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d107      	bne.n	8001b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f925 	bl	8001d84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f9c8 	bl	8001ee4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b40      	cmp	r3, #64	; 0x40
 8001b5c:	d13a      	bne.n	8001bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d035      	beq.n	8001bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7e      	ldr	r2, [pc, #504]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001b72:	4b7e      	ldr	r3, [pc, #504]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b74:	e001      	b.n	8001b7a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001b76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4979      	ldr	r1, [pc, #484]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001b82:	428b      	cmp	r3, r1
 8001b84:	d101      	bne.n	8001b8a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001b86:	4b79      	ldr	r3, [pc, #484]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001b88:	e001      	b.n	8001b8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b92:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ba2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f043 0202 	orr.w	r2, r3, #2
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fe88 	bl	80018e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	f040 80be 	bne.w	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80b8 	beq.w	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bfa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a59      	ldr	r2, [pc, #356]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001c06:	4b59      	ldr	r3, [pc, #356]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c08:	e001      	b.n	8001c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4954      	ldr	r1, [pc, #336]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001c16:	428b      	cmp	r3, r1
 8001c18:	d101      	bne.n	8001c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001c1c:	e001      	b.n	8001c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f043 0204 	orr.w	r2, r3, #4
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fe4a 	bl	80018e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c50:	e084      	b.n	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d107      	bne.n	8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8be 	bl	8001de8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f8fd 	bl	8001e80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d12f      	bne.n	8001cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d02a      	beq.n	8001cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ca8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2e      	ldr	r2, [pc, #184]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cb6:	e001      	b.n	8001cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001cb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4929      	ldr	r1, [pc, #164]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001cc4:	428b      	cmp	r3, r1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001cca:	e001      	b.n	8001cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cd4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0202 	orr.w	r2, r3, #2
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff fdfa 	bl	80018e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d131      	bne.n	8001d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d02c      	beq.n	8001d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d10:	e001      	b.n	8001d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001d12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4912      	ldr	r1, [pc, #72]	; (8001d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d1e:	428b      	cmp	r3, r1
 8001d20:	d101      	bne.n	8001d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d24:	e001      	b.n	8001d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d3e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fdc5 	bl	80018e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d5a:	e000      	b.n	8001d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001d5c:	bf00      	nop
}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40003800 	.word	0x40003800
 8001d6c:	40003400 	.word	0x40003400

08001d70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	1c99      	adds	r1, r3, #2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6251      	str	r1, [r2, #36]	; 0x24
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d113      	bne.n	8001dde <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff ffc9 	bl	8001d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	1c99      	adds	r1, r3, #2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6251      	str	r1, [r2, #36]	; 0x24
 8001dfa:	8819      	ldrh	r1, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <I2SEx_TxISR_I2SExt+0x90>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <I2SEx_TxISR_I2SExt+0x22>
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <I2SEx_TxISR_I2SExt+0x94>)
 8001e08:	e001      	b.n	8001e0e <I2SEx_TxISR_I2SExt+0x26>
 8001e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e0e:	460a      	mov	r2, r1
 8001e10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d121      	bne.n	8001e6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <I2SEx_TxISR_I2SExt+0x90>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d101      	bne.n	8001e38 <I2SEx_TxISR_I2SExt+0x50>
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <I2SEx_TxISR_I2SExt+0x94>)
 8001e36:	e001      	b.n	8001e3c <I2SEx_TxISR_I2SExt+0x54>
 8001e38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <I2SEx_TxISR_I2SExt+0x90>)
 8001e44:	428b      	cmp	r3, r1
 8001e46:	d101      	bne.n	8001e4c <I2SEx_TxISR_I2SExt+0x64>
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <I2SEx_TxISR_I2SExt+0x94>)
 8001e4a:	e001      	b.n	8001e50 <I2SEx_TxISR_I2SExt+0x68>
 8001e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d106      	bne.n	8001e6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff81 	bl	8001d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40003800 	.word	0x40003800
 8001e7c:	40003400 	.word	0x40003400

08001e80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68d8      	ldr	r0, [r3, #12]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	1c99      	adds	r1, r3, #2
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001e98:	b282      	uxth	r2, r0
 8001e9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d113      	bne.n	8001edc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff ff4a 	bl	8001d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <I2SEx_RxISR_I2SExt+0x90>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <I2SEx_RxISR_I2SExt+0x16>
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <I2SEx_RxISR_I2SExt+0x94>)
 8001ef8:	e001      	b.n	8001efe <I2SEx_RxISR_I2SExt+0x1a>
 8001efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001efe:	68d8      	ldr	r0, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	1c99      	adds	r1, r3, #2
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001f0a:	b282      	uxth	r2, r0
 8001f0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d121      	bne.n	8001f6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <I2SEx_RxISR_I2SExt+0x90>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <I2SEx_RxISR_I2SExt+0x50>
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <I2SEx_RxISR_I2SExt+0x94>)
 8001f32:	e001      	b.n	8001f38 <I2SEx_RxISR_I2SExt+0x54>
 8001f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	490d      	ldr	r1, [pc, #52]	; (8001f74 <I2SEx_RxISR_I2SExt+0x90>)
 8001f40:	428b      	cmp	r3, r1
 8001f42:	d101      	bne.n	8001f48 <I2SEx_RxISR_I2SExt+0x64>
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <I2SEx_RxISR_I2SExt+0x94>)
 8001f46:	e001      	b.n	8001f4c <I2SEx_RxISR_I2SExt+0x68>
 8001f48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d106      	bne.n	8001f6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff03 	bl	8001d70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40003800 	.word	0x40003800
 8001f78:	40003400 	.word	0x40003400

08001f7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f7e:	b08f      	sub	sp, #60	; 0x3c
 8001f80:	af0a      	add	r7, sp, #40	; 0x28
 8001f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e10f      	b.n	80021ae <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d106      	bne.n	8001fae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f005 f9ab 	bl	8007304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f002 f896 	bl	80040fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	687e      	ldr	r6, [r7, #4]
 8001fda:	466d      	mov	r5, sp
 8001fdc:	f106 0410 	add.w	r4, r6, #16
 8001fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fe8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fec:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ff0:	1d33      	adds	r3, r6, #4
 8001ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff4:	6838      	ldr	r0, [r7, #0]
 8001ff6:	f001 ff6e 	bl	8003ed6 <USB_CoreInit>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d005      	beq.n	800200c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2202      	movs	r2, #2
 8002004:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0d0      	b.n	80021ae <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f002 f884 	bl	8004120 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e04a      	b.n	80020b4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	333d      	adds	r3, #61	; 0x3d
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	333c      	adds	r3, #60	; 0x3c
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	b298      	uxth	r0, r3
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	1a9b      	subs	r3, r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3342      	adds	r3, #66	; 0x42
 800205a:	4602      	mov	r2, r0
 800205c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	333f      	adds	r3, #63	; 0x3f
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	3344      	adds	r3, #68	; 0x44
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3348      	adds	r3, #72	; 0x48
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800209a:	7bfa      	ldrb	r2, [r7, #15]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3350      	adds	r3, #80	; 0x50
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3af      	bcc.n	800201e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e044      	b.n	800214e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	3301      	adds	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3b5      	bcc.n	80020c4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	687e      	ldr	r6, [r7, #4]
 8002160:	466d      	mov	r5, sp
 8002162:	f106 0410 	add.w	r4, r6, #16
 8002166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800216c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800216e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002172:	e885 0003 	stmia.w	r5, {r0, r1}
 8002176:	1d33      	adds	r3, r6, #4
 8002178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800217a:	6838      	ldr	r0, [r7, #0]
 800217c:	f002 f81c 	bl	80041b8 <USB_DevInit>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e00d      	b.n	80021ae <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f003 f898 	bl	80052dc <USB_DevDisconnect>

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_PCD_Start+0x1c>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e020      	b.n	8002214 <HAL_PCD_Start+0x5e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d109      	bne.n	80021f6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d005      	beq.n	80021f6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 ff6e 	bl	80040dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f003 f848 	bl	800529a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800221c:	b590      	push	{r4, r7, lr}
 800221e:	b08d      	sub	sp, #52	; 0x34
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 f906 	bl	8005444 <USB_GetMode>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 839d 	bne.w	800297a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f003 f86a 	bl	800531e <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8393 	beq.w	8002978 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f003 f861 	bl	800531e <USB_ReadInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d107      	bne.n	8002276 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695a      	ldr	r2, [r3, #20]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f002 0202 	and.w	r2, r2, #2
 8002274:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f003 f84f 	bl	800531e <USB_ReadInterrupts>
 8002280:	4603      	mov	r3, r0
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b10      	cmp	r3, #16
 8002288:	d161      	bne.n	800234e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0210 	bic.w	r2, r2, #16
 8002298:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 020f 	and.w	r2, r3, #15
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	3304      	adds	r3, #4
 80022b8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	0c5b      	lsrs	r3, r3, #17
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d124      	bne.n	8002310 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d035      	beq.n	800233e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	461a      	mov	r2, r3
 80022e4:	6a38      	ldr	r0, [r7, #32]
 80022e6:	f002 fe86 	bl	8004ff6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f6:	441a      	add	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	699a      	ldr	r2, [r3, #24]
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	091b      	lsrs	r3, r3, #4
 8002304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002308:	441a      	add	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	619a      	str	r2, [r3, #24]
 800230e:	e016      	b.n	800233e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2b06      	cmp	r3, #6
 800231a:	d110      	bne.n	800233e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002322:	2208      	movs	r2, #8
 8002324:	4619      	mov	r1, r3
 8002326:	6a38      	ldr	r0, [r7, #32]
 8002328:	f002 fe65 	bl	8004ff6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002338:	441a      	add	r2, r3
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0210 	orr.w	r2, r2, #16
 800234c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f002 ffe3 	bl	800531e <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800235e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002362:	d16e      	bne.n	8002442 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f002 ffe9 	bl	8005344 <USB_ReadDevAllOutEpInterrupt>
 8002372:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002374:	e062      	b.n	800243c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d057      	beq.n	8002430 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	4611      	mov	r1, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f003 f80e 	bl	80053ac <USB_ReadDevOutEPInterrupt>
 8002390:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00c      	beq.n	80023b6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023a8:	461a      	mov	r2, r3
 80023aa:	2301      	movs	r3, #1
 80023ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fdb1 	bl	8002f18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023cc:	461a      	mov	r2, r3
 80023ce:	2308      	movs	r3, #8
 80023d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 feab 	bl	8003130 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f0:	461a      	mov	r2, r3
 80023f2:	2310      	movs	r3, #16
 80023f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240c:	461a      	mov	r2, r3
 800240e:	2320      	movs	r3, #32
 8002410:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	4413      	add	r3, r2
 8002424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002428:	461a      	mov	r2, r3
 800242a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800242e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	3301      	adds	r3, #1
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	2b00      	cmp	r3, #0
 8002440:	d199      	bne.n	8002376 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 ff69 	bl	800531e <USB_ReadInterrupts>
 800244c:	4603      	mov	r3, r0
 800244e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002452:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002456:	f040 80c0 	bne.w	80025da <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 ff8a 	bl	8005378 <USB_ReadDevAllInEpInterrupt>
 8002464:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800246a:	e0b2      	b.n	80025d2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80a7 	beq.w	80025c6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f002 ffb0 	bl	80053e8 <USB_ReadDevInEPInterrupt>
 8002488:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d057      	beq.n	8002544 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	2201      	movs	r2, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69f9      	ldr	r1, [r7, #28]
 80024b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024b4:	4013      	ands	r3, r2
 80024b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c4:	461a      	mov	r2, r3
 80024c6:	2301      	movs	r3, #1
 80024c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d132      	bne.n	8002538 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3348      	adds	r3, #72	; 0x48
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4403      	add	r3, r0
 80024f2:	3344      	adds	r3, #68	; 0x44
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4419      	add	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4403      	add	r3, r0
 8002506:	3348      	adds	r3, #72	; 0x48
 8002508:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d113      	bne.n	8002538 <HAL_PCD_IRQHandler+0x31c>
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3350      	adds	r3, #80	; 0x50
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002530:	461a      	mov	r2, r3
 8002532:	2101      	movs	r1, #1
 8002534:	f002 ffb8 	bl	80054a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	b2db      	uxtb	r3, r3
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f004 ff6f 	bl	8007422 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800255a:	461a      	mov	r2, r3
 800255c:	2308      	movs	r3, #8
 800255e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002576:	461a      	mov	r2, r3
 8002578:	2310      	movs	r3, #16
 800257a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002592:	461a      	mov	r2, r3
 8002594:	2340      	movs	r3, #64	; 0x40
 8002596:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ae:	461a      	mov	r2, r3
 80025b0:	2302      	movs	r3, #2
 80025b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 fc1b 	bl	8002dfc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ce:	085b      	lsrs	r3, r3, #1
 80025d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f47f af49 	bne.w	800246c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fe9d 	bl	800531e <USB_ReadInterrupts>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ee:	d122      	bne.n	8002636 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800260a:	2b01      	cmp	r3, #1
 800260c:	d108      	bne.n	8002620 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002616:	2100      	movs	r1, #0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fe27 	bl	800326c <HAL_PCDEx_LPM_Callback>
 800261e:	e002      	b.n	8002626 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f004 ff75 	bl	8007510 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f002 fe6f 	bl	800531e <USB_ReadInterrupts>
 8002640:	4603      	mov	r3, r0
 8002642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800264a:	d112      	bne.n	8002672 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d102      	bne.n	8002662 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f004 ff31 	bl	80074c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002670:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f002 fe51 	bl	800531e <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	f040 80c7 	bne.w	8002818 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2110      	movs	r1, #16
 80026a4:	4618      	mov	r0, r3
 80026a6:	f001 feeb 	bl	8004480 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ae:	e056      	b.n	800275e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026bc:	461a      	mov	r2, r3
 80026be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	015a      	lsls	r2, r3, #5
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026d4:	0151      	lsls	r1, r2, #5
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	440a      	add	r2, r1
 80026da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026e2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80026e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f4:	0151      	lsls	r1, r2, #5
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	440a      	add	r2, r1
 80026fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80026fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002702:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002710:	461a      	mov	r2, r3
 8002712:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002716:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002728:	0151      	lsls	r1, r2, #5
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	440a      	add	r2, r1
 800272e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002736:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	440a      	add	r2, r1
 800274e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002752:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002756:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	3301      	adds	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002764:	429a      	cmp	r2, r3
 8002766:	d3a3      	bcc.n	80026b0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002776:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800277a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2b00      	cmp	r3, #0
 8002782:	d016      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002794:	f043 030b 	orr.w	r3, r3, #11
 8002798:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027aa:	f043 030b 	orr.w	r3, r3, #11
 80027ae:	6453      	str	r3, [r2, #68]	; 0x44
 80027b0:	e015      	b.n	80027de <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d8:	f043 030b 	orr.w	r3, r3, #11
 80027dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80027f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002802:	461a      	mov	r2, r3
 8002804:	f002 fe50 	bl	80054a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fd7e 	bl	800531e <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282c:	d124      	bne.n	8002878 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fe14 	bl	8005460 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fe7c 	bl	800453a <USB_GetDevSpeed>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681c      	ldr	r4, [r3, #0]
 800284e:	f001 f959 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8002852:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	4620      	mov	r0, r4
 800285e:	f001 fb9b 	bl	8003f98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f004 fe05 	bl	8007472 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002876:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fd4e 	bl	800531e <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b08      	cmp	r3, #8
 800288a:	d10a      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f004 fde2 	bl	8007456 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695a      	ldr	r2, [r3, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f002 0208 	and.w	r2, r2, #8
 80028a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f002 fd39 	bl	800531e <USB_ReadInterrupts>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b6:	d10f      	bne.n	80028d8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f004 fe44 	bl	8007550 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f002 fd1e 	bl	800531e <USB_ReadInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ec:	d10f      	bne.n	800290e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4619      	mov	r1, r3
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f004 fe17 	bl	800752c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800290c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fd03 	bl	800531e <USB_ReadInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d10a      	bne.n	800293a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f004 fe25 	bl	8007574 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	695a      	ldr	r2, [r3, #20]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fced 	bl	800531e <USB_ReadInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d115      	bne.n	800297a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f004 fe15 	bl	8007590 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e000      	b.n	800297a <HAL_PCD_IRQHandler+0x75e>
      return;
 8002978:	bf00      	nop
    }
  }
}
 800297a:	3734      	adds	r7, #52	; 0x34
 800297c:	46bd      	mov	sp, r7
 800297e:	bd90      	pop	{r4, r7, pc}

08002980 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_PCD_SetAddress+0x1a>
 8002996:	2302      	movs	r3, #2
 8002998:	e013      	b.n	80029c2 <HAL_PCD_SetAddress+0x42>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f002 fc4b 	bl	800524e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	4608      	mov	r0, r1
 80029d4:	4611      	mov	r1, r2
 80029d6:	461a      	mov	r2, r3
 80029d8:	4603      	mov	r3, r0
 80029da:	70fb      	strb	r3, [r7, #3]
 80029dc:	460b      	mov	r3, r1
 80029de:	803b      	strh	r3, [r7, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da0f      	bge.n	8002a10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	f003 020f 	and.w	r2, r3, #15
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	3338      	adds	r3, #56	; 0x38
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	705a      	strb	r2, [r3, #1]
 8002a0e:	e00f      	b.n	8002a30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 020f 	and.w	r2, r3, #15
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	3304      	adds	r3, #4
 8002a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a3c:	883a      	ldrh	r2, [r7, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	78ba      	ldrb	r2, [r7, #2]
 8002a46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d004      	beq.n	8002a5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a5a:	78bb      	ldrb	r3, [r7, #2]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d102      	bne.n	8002a66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_PCD_EP_Open+0xaa>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e00e      	b.n	8002a92 <HAL_PCD_EP_Open+0xc8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68f9      	ldr	r1, [r7, #12]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 fd7e 	bl	8004584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002a90:	7afb      	ldrb	r3, [r7, #11]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da0f      	bge.n	8002ace <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f003 020f 	and.w	r2, r3, #15
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	3338      	adds	r3, #56	; 0x38
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	705a      	strb	r2, [r3, #1]
 8002acc:	e00f      	b.n	8002aee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	f003 020f 	and.w	r2, r3, #15
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_PCD_EP_Close+0x6e>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e00e      	b.n	8002b26 <HAL_PCD_EP_Close+0x8c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68f9      	ldr	r1, [r7, #12]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f001 fdbc 	bl	8004694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	f003 020f 	and.w	r2, r3, #15
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4413      	add	r3, r2
 8002b54:	3304      	adds	r3, #4
 8002b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d102      	bne.n	8002b8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	f002 f897 	bl	8004cd4 <USB_EP0StartXfer>
 8002ba6:	e008      	b.n	8002bba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	6979      	ldr	r1, [r7, #20]
 8002bb6:	f001 fe49 	bl	800484c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 020f 	and.w	r2, r3, #15
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	460b      	mov	r3, r1
 8002c02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	f003 020f 	and.w	r2, r3, #15
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3338      	adds	r3, #56	; 0x38
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2201      	movs	r2, #1
 8002c32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	f002 f835 	bl	8004cd4 <USB_EP0StartXfer>
 8002c6a:	e008      	b.n	8002c7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	f001 fde7 	bl	800484c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d901      	bls.n	8002ca6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e050      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0f      	bge.n	8002cce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3338      	adds	r3, #56	; 0x38
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	705a      	strb	r2, [r3, #1]
 8002ccc:	e00d      	b.n	8002cea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2201      	movs	r2, #1
 8002cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_PCD_EP_SetStall+0x82>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e01e      	b.n	8002d48 <HAL_PCD_EP_SetStall+0xc0>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68f9      	ldr	r1, [r7, #12]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 f9c4 	bl	80050a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d1e:	78fb      	ldrb	r3, [r7, #3]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	b2d9      	uxtb	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f002 fbb5 	bl	80054a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 020f 	and.w	r2, r3, #15
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d901      	bls.n	8002d6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e042      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da0f      	bge.n	8002d96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3338      	adds	r3, #56	; 0x38
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2201      	movs	r2, #1
 8002d92:	705a      	strb	r2, [r3, #1]
 8002d94:	e00f      	b.n	8002db6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_PCD_EP_ClrStall+0x86>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e00e      	b.n	8002df4 <HAL_PCD_EP_ClrStall+0xa4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 f9cc 	bl	8005182 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	3338      	adds	r3, #56	; 0x38
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	699a      	ldr	r2, [r3, #24]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d901      	bls.n	8002e34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e06c      	b.n	8002f0e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d902      	bls.n	8002e50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	3303      	adds	r3, #3
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e58:	e02b      	b.n	8002eb2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d902      	bls.n	8002e76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3303      	adds	r3, #3
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	68d9      	ldr	r1, [r3, #12]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	4603      	mov	r3, r0
 8002e94:	6978      	ldr	r0, [r7, #20]
 8002e96:	f002 f870 	bl	8004f7a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	441a      	add	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	441a      	add	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d809      	bhi.n	8002edc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	699a      	ldr	r2, [r3, #24]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d203      	bcs.n	8002edc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1be      	bne.n	8002e5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d811      	bhi.n	8002f0c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	2201      	movs	r2, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	6939      	ldr	r1, [r7, #16]
 8002f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f08:	4013      	ands	r3, r2
 8002f0a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3720      	adds	r7, #32
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	333c      	adds	r3, #60	; 0x3c
 8002f30:	3304      	adds	r3, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	f040 80a0 	bne.w	8003090 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d015      	beq.n	8002f86 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a72      	ldr	r2, [pc, #456]	; (8003128 <PCD_EP_OutXfrComplete_int+0x210>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	f240 80dd 	bls.w	800311e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 80d7 	beq.w	800311e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f82:	6093      	str	r3, [r2, #8]
 8002f84:	e0cb      	b.n	800311e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	6093      	str	r3, [r2, #8]
 8002fa2:	e0bc      	b.n	800311e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f040 80b7 	bne.w	800311e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <PCD_EP_OutXfrComplete_int+0x210>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d90f      	bls.n	8002fd8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd4:	6093      	str	r3, [r2, #8]
 8002fd6:	e0a2      	b.n	800311e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002fea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	0159      	lsls	r1, r3, #5
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	440b      	add	r3, r1
 8002ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002ffe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4403      	add	r3, r0
 800300e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003012:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003026:	6819      	ldr	r1, [r3, #0]
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4403      	add	r3, r0
 8003036:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4419      	add	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4403      	add	r3, r0
 800304c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003050:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d114      	bne.n	8003082 <PCD_EP_OutXfrComplete_int+0x16a>
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d108      	bne.n	8003082 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800307a:	461a      	mov	r2, r3
 800307c:	2101      	movs	r1, #1
 800307e:	f002 fa13 	bl	80054a8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f004 f9af 	bl	80073ec <HAL_PCD_DataOutStageCallback>
 800308e:	e046      	b.n	800311e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a26      	ldr	r2, [pc, #152]	; (800312c <PCD_EP_OutXfrComplete_int+0x214>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d124      	bne.n	80030e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ae:	461a      	mov	r2, r3
 80030b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b4:	6093      	str	r3, [r2, #8]
 80030b6:	e032      	b.n	800311e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	2320      	movs	r3, #32
 80030d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f004 f986 	bl	80073ec <HAL_PCD_DataOutStageCallback>
 80030e0:	e01d      	b.n	800311e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d114      	bne.n	8003112 <PCD_EP_OutXfrComplete_int+0x1fa>
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d108      	bne.n	8003112 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800310a:	461a      	mov	r2, r3
 800310c:	2100      	movs	r1, #0
 800310e:	f002 f9cb 	bl	80054a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f004 f967 	bl	80073ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	4f54300a 	.word	0x4f54300a
 800312c:	4f54310a 	.word	0x4f54310a

08003130 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	333c      	adds	r3, #60	; 0x3c
 8003148:	3304      	adds	r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d90e      	bls.n	8003184 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800316c:	2b00      	cmp	r3, #0
 800316e:	d009      	beq.n	8003184 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317c:	461a      	mov	r2, r3
 800317e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003182:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f004 f91f 	bl	80073c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d90c      	bls.n	80031ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d108      	bne.n	80031ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031a4:	461a      	mov	r2, r3
 80031a6:	2101      	movs	r1, #1
 80031a8:	f002 f97e 	bl	80054a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	4f54300a 	.word	0x4f54300a

080031bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
 80031c8:	4613      	mov	r3, r2
 80031ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d107      	bne.n	80031ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031da:	883b      	ldrh	r3, [r7, #0]
 80031dc:	0419      	lsls	r1, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
 80031e8:	e028      	b.n	800323c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	4413      	add	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	e00d      	b.n	800321a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	7bfb      	ldrb	r3, [r7, #15]
 8003204:	3340      	adds	r3, #64	; 0x40
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	0c1b      	lsrs	r3, r3, #16
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	3301      	adds	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	3b01      	subs	r3, #1
 8003220:	429a      	cmp	r2, r3
 8003222:	d3ec      	bcc.n	80031fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003224:	883b      	ldrh	r3, [r7, #0]
 8003226:	0418      	lsls	r0, r3, #16
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	3b01      	subs	r3, #1
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	4302      	orrs	r2, r0
 8003234:	3340      	adds	r3, #64	; 0x40
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e264      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d075      	beq.n	800338e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a2:	4ba3      	ldr	r3, [pc, #652]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d00c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ae:	4ba0      	ldr	r3, [pc, #640]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d112      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b9d      	ldr	r3, [pc, #628]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	4b99      	ldr	r3, [pc, #612]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d157      	bne.n	800338c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e23f      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x74>
 80032ea:	4b91      	ldr	r3, [pc, #580]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a90      	ldr	r2, [pc, #576]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b8b      	ldr	r3, [pc, #556]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a8a      	ldr	r2, [pc, #552]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b88      	ldr	r3, [pc, #544]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a87      	ldr	r2, [pc, #540]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 800331c:	4b84      	ldr	r3, [pc, #528]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a83      	ldr	r2, [pc, #524]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b81      	ldr	r3, [pc, #516]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a80      	ldr	r2, [pc, #512]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7fd fd28 	bl	8000d90 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7fd fd24 	bl	8000d90 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e204      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b76      	ldr	r3, [pc, #472]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xc0>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fd fd14 	bl	8000d90 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7fd fd10 	bl	8000d90 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	; 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1f0      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b6c      	ldr	r3, [pc, #432]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0xe8>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d063      	beq.n	8003462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a6:	4b62      	ldr	r3, [pc, #392]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d11c      	bne.n	80033ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b2:	4b5f      	ldr	r3, [pc, #380]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d116      	bne.n	80033ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	4b5c      	ldr	r3, [pc, #368]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x152>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1c4      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4952      	ldr	r1, [pc, #328]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	e03a      	b.n	8003462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <HAL_RCC_OscConfig+0x2b0>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fd fcc9 	bl	8000d90 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003402:	f7fd fcc5 	bl	8000d90 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1a5      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	4b46      	ldr	r3, [pc, #280]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4940      	ldr	r1, [pc, #256]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
 8003434:	e015      	b.n	8003462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <HAL_RCC_OscConfig+0x2b0>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fca8 	bl	8000d90 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003444:	f7fd fca4 	bl	8000d90 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e184      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	4b36      	ldr	r3, [pc, #216]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d030      	beq.n	80034d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	4b30      	ldr	r3, [pc, #192]	; (8003538 <HAL_RCC_OscConfig+0x2b4>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fd fc88 	bl	8000d90 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003484:	f7fd fc84 	bl	8000d90 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e164      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x200>
 80034a2:	e015      	b.n	80034d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <HAL_RCC_OscConfig+0x2b4>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7fd fc71 	bl	8000d90 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b2:	f7fd fc6d 	bl	8000d90 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e14d      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c4:	4b1a      	ldr	r3, [pc, #104]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1f0      	bne.n	80034b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a0 	beq.w	800361e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034de:	2300      	movs	r3, #0
 80034e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10f      	bne.n	800350e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 80034f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6413      	str	r3, [r2, #64]	; 0x40
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	60bb      	str	r3, [r7, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800350a:	2301      	movs	r3, #1
 800350c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x2b8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d121      	bne.n	800355e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800351a:	4b08      	ldr	r3, [pc, #32]	; (800353c <HAL_RCC_OscConfig+0x2b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a07      	ldr	r2, [pc, #28]	; (800353c <HAL_RCC_OscConfig+0x2b8>)
 8003520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003526:	f7fd fc33 	bl	8000d90 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	e011      	b.n	8003552 <HAL_RCC_OscConfig+0x2ce>
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	42470000 	.word	0x42470000
 8003538:	42470e80 	.word	0x42470e80
 800353c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003540:	f7fd fc26 	bl	8000d90 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e106      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b85      	ldr	r3, [pc, #532]	; (8003768 <HAL_RCC_OscConfig+0x4e4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d106      	bne.n	8003574 <HAL_RCC_OscConfig+0x2f0>
 8003566:	4b81      	ldr	r3, [pc, #516]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356a:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	6713      	str	r3, [r2, #112]	; 0x70
 8003572:	e01c      	b.n	80035ae <HAL_RCC_OscConfig+0x32a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b05      	cmp	r3, #5
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x312>
 800357c:	4b7b      	ldr	r3, [pc, #492]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003580:	4a7a      	ldr	r2, [pc, #488]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	6713      	str	r3, [r2, #112]	; 0x70
 8003588:	4b78      	ldr	r3, [pc, #480]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	4a77      	ldr	r2, [pc, #476]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6713      	str	r3, [r2, #112]	; 0x70
 8003594:	e00b      	b.n	80035ae <HAL_RCC_OscConfig+0x32a>
 8003596:	4b75      	ldr	r3, [pc, #468]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a74      	ldr	r2, [pc, #464]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	4b72      	ldr	r3, [pc, #456]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a71      	ldr	r2, [pc, #452]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d015      	beq.n	80035e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fd fbeb 	bl	8000d90 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035be:	f7fd fbe7 	bl	8000d90 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0c5      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	4b65      	ldr	r3, [pc, #404]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80035d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ee      	beq.n	80035be <HAL_RCC_OscConfig+0x33a>
 80035e0:	e014      	b.n	800360c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e2:	f7fd fbd5 	bl	8000d90 <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e8:	e00a      	b.n	8003600 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fd fbd1 	bl	8000d90 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d901      	bls.n	8003600 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e0af      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	4b5a      	ldr	r3, [pc, #360]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ee      	bne.n	80035ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d105      	bne.n	800361e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003612:	4b56      	ldr	r3, [pc, #344]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a55      	ldr	r2, [pc, #340]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 8003618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 809b 	beq.w	800375e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003628:	4b50      	ldr	r3, [pc, #320]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b08      	cmp	r3, #8
 8003632:	d05c      	beq.n	80036ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d141      	bne.n	80036c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363c:	4b4c      	ldr	r3, [pc, #304]	; (8003770 <HAL_RCC_OscConfig+0x4ec>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fd fba5 	bl	8000d90 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364a:	f7fd fba1 	bl	8000d90 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e081      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365c:	4b43      	ldr	r3, [pc, #268]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f0      	bne.n	800364a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	019b      	lsls	r3, r3, #6
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	061b      	lsls	r3, r3, #24
 800368c:	4937      	ldr	r1, [pc, #220]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003692:	4b37      	ldr	r3, [pc, #220]	; (8003770 <HAL_RCC_OscConfig+0x4ec>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd fb7a 	bl	8000d90 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fd fb76 	bl	8000d90 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e056      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x41c>
 80036be:	e04e      	b.n	800375e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b2b      	ldr	r3, [pc, #172]	; (8003770 <HAL_RCC_OscConfig+0x4ec>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c6:	f7fd fb63 	bl	8000d90 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ce:	f7fd fb5f 	bl	8000d90 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e03f      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x44a>
 80036ec:	e037      	b.n	800375e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e032      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036fa:	4b1c      	ldr	r3, [pc, #112]	; (800376c <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d028      	beq.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d121      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d11a      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800372a:	4013      	ands	r3, r2
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003730:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003732:	4293      	cmp	r3, r2
 8003734:	d111      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d107      	bne.n	800375a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d001      	beq.n	800375e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40007000 	.word	0x40007000
 800376c:	40023800 	.word	0x40023800
 8003770:	42470060 	.word	0x42470060

08003774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0cc      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b68      	ldr	r3, [pc, #416]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d90c      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b65      	ldr	r3, [pc, #404]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b63      	ldr	r3, [pc, #396]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b59      	ldr	r3, [pc, #356]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e0:	4b53      	ldr	r3, [pc, #332]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a52      	ldr	r2, [pc, #328]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b50      	ldr	r3, [pc, #320]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	494d      	ldr	r1, [pc, #308]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d044      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b47      	ldr	r3, [pc, #284]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d119      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	2b03      	cmp	r3, #3
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3b      	ldr	r3, [pc, #236]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e067      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4934      	ldr	r1, [pc, #208]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fd fa94 	bl	8000d90 <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fd fa90 	bl	8000d90 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e04f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b25      	ldr	r3, [pc, #148]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20c      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e032      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4916      	ldr	r1, [pc, #88]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 f821 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490a      	ldr	r1, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	; (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd f9f4 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023c00 	.word	0x40023c00
 8003930:	40023800 	.word	0x40023800
 8003934:	08007a30 	.word	0x08007a30
 8003938:	20000000 	.word	0x20000000
 800393c:	20000004 	.word	0x20000004

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	2300      	movs	r3, #0
 8003952:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003958:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d00d      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x40>
 8003964:	2b08      	cmp	r3, #8
 8003966:	f200 80bd 	bhi.w	8003ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x34>
 800396e:	2b04      	cmp	r3, #4
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x3a>
 8003972:	e0b7      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b61      	ldr	r3, [pc, #388]	; (8003afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003976:	60bb      	str	r3, [r7, #8]
       break;
 8003978:	e0b7      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800397c:	60bb      	str	r3, [r7, #8]
      break;
 800397e:	e0b4      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003980:	4b5d      	ldr	r3, [pc, #372]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398a:	4b5b      	ldr	r3, [pc, #364]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04d      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003996:	4b58      	ldr	r3, [pc, #352]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	461a      	mov	r2, r3
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039a6:	f04f 0100 	mov.w	r1, #0
 80039aa:	ea02 0800 	and.w	r8, r2, r0
 80039ae:	ea03 0901 	and.w	r9, r3, r1
 80039b2:	4640      	mov	r0, r8
 80039b4:	4649      	mov	r1, r9
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	014b      	lsls	r3, r1, #5
 80039c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039c4:	0142      	lsls	r2, r0, #5
 80039c6:	4610      	mov	r0, r2
 80039c8:	4619      	mov	r1, r3
 80039ca:	ebb0 0008 	subs.w	r0, r0, r8
 80039ce:	eb61 0109 	sbc.w	r1, r1, r9
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	018b      	lsls	r3, r1, #6
 80039dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039e0:	0182      	lsls	r2, r0, #6
 80039e2:	1a12      	subs	r2, r2, r0
 80039e4:	eb63 0301 	sbc.w	r3, r3, r1
 80039e8:	f04f 0000 	mov.w	r0, #0
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	00d9      	lsls	r1, r3, #3
 80039f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039f6:	00d0      	lsls	r0, r2, #3
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	eb12 0208 	adds.w	r2, r2, r8
 8003a00:	eb43 0309 	adc.w	r3, r3, r9
 8003a04:	f04f 0000 	mov.w	r0, #0
 8003a08:	f04f 0100 	mov.w	r1, #0
 8003a0c:	0259      	lsls	r1, r3, #9
 8003a0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a12:	0250      	lsls	r0, r2, #9
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f04f 0300 	mov.w	r3, #0
 8003a24:	f7fc fbd8 	bl	80001d8 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	e04a      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a42:	f04f 0100 	mov.w	r1, #0
 8003a46:	ea02 0400 	and.w	r4, r2, r0
 8003a4a:	ea03 0501 	and.w	r5, r3, r1
 8003a4e:	4620      	mov	r0, r4
 8003a50:	4629      	mov	r1, r5
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	014b      	lsls	r3, r1, #5
 8003a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a60:	0142      	lsls	r2, r0, #5
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	1b00      	subs	r0, r0, r4
 8003a68:	eb61 0105 	sbc.w	r1, r1, r5
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	018b      	lsls	r3, r1, #6
 8003a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a7a:	0182      	lsls	r2, r0, #6
 8003a7c:	1a12      	subs	r2, r2, r0
 8003a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003a82:	f04f 0000 	mov.w	r0, #0
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	00d9      	lsls	r1, r3, #3
 8003a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a90:	00d0      	lsls	r0, r2, #3
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	1912      	adds	r2, r2, r4
 8003a98:	eb45 0303 	adc.w	r3, r5, r3
 8003a9c:	f04f 0000 	mov.w	r0, #0
 8003aa0:	f04f 0100 	mov.w	r1, #0
 8003aa4:	0299      	lsls	r1, r3, #10
 8003aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003aaa:	0290      	lsls	r0, r2, #10
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	f7fc fb8c 	bl	80001d8 <__aeabi_uldivmod>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	60bb      	str	r3, [r7, #8]
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003ae6:	60bb      	str	r3, [r7, #8]
      break;
 8003ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aea:	68bb      	ldr	r3, [r7, #8]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3710      	adds	r7, #16
 8003af0:	46bd      	mov	sp, r7
 8003af2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	007a1200 	.word	0x007a1200

08003b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b08:	4b03      	ldr	r3, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000000 	.word	0x20000000

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b20:	f7ff fff0 	bl	8003b04 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4903      	ldr	r1, [pc, #12]	; (8003b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	08007a40 	.word	0x08007a40

08003b44 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d035      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b6c:	4b62      	ldr	r3, [pc, #392]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b72:	f7fd f90d 	bl	8000d90 <HAL_GetTick>
 8003b76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b7a:	f7fd f909 	bl	8000d90 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e0b0      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b8c:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	019a      	lsls	r2, r3, #6
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	071b      	lsls	r3, r3, #28
 8003ba4:	4955      	ldr	r1, [pc, #340]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bac:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb2:	f7fd f8ed 	bl	8000d90 <HAL_GetTick>
 8003bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bba:	f7fd f8e9 	bl	8000d90 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e090      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bcc:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8083 	beq.w	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b44      	ldr	r3, [pc, #272]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a43      	ldr	r2, [pc, #268]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b41      	ldr	r3, [pc, #260]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c02:	4b3f      	ldr	r3, [pc, #252]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a3e      	ldr	r2, [pc, #248]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0e:	f7fd f8bf 	bl	8000d90 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fd f8bb 	bl	8000d90 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e062      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c28:	4b35      	ldr	r3, [pc, #212]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c34:	4b31      	ldr	r3, [pc, #196]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02f      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c52:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5c:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c68:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c6e:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d114      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7fd f889 	bl	8000d90 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd f885 	bl	8000d90 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e02a      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ee      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb0:	d10d      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cc6:	490d      	ldr	r1, [pc, #52]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]
 8003ccc:	e005      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cd4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cd8:	6093      	str	r3, [r2, #8]
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce6:	4905      	ldr	r1, [pc, #20]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	42470068 	.word	0x42470068
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40007000 	.word	0x40007000
 8003d04:	42470e40 	.word	0x42470e40

08003d08 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d13e      	bne.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003d26:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d005      	beq.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d12f      	bne.n	8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d3e:	617b      	str	r3, [r7, #20]
          break;
 8003d40:	e02f      	b.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d4e:	d108      	bne.n	8003d62 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d50:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d58:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	e007      	b.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6a:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8c:	0f1b      	lsrs	r3, r3, #28
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	617b      	str	r3, [r7, #20]
          break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]
          break;
 8003da0:	bf00      	nop
        }
      }
      break;
 8003da2:	bf00      	nop
    }
  }
  return frequency;
 8003da4:	697b      	ldr	r3, [r7, #20]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	371c      	adds	r7, #28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	00bb8000 	.word	0x00bb8000
 8003dbc:	007a1200 	.word	0x007a1200
 8003dc0:	00f42400 	.word	0x00f42400

08003dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07b      	b.n	8003ece <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de6:	d009      	beq.n	8003dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
 8003dee:	e005      	b.n	8003dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fc fe74 	bl	8000b04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	ea42 0103 	orr.w	r1, r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 0104 	and.w	r1, r3, #4
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	f003 0210 	and.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	f107 001c 	add.w	r0, r7, #28
 8003ee4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d122      	bne.n	8003f34 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f001 fb1b 	bl	8005564 <USB_CoreReset>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	73fb      	strb	r3, [r7, #15]
 8003f32:	e01a      	b.n	8003f6a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 fb0f 	bl	8005564 <USB_CoreReset>
 8003f46:	4603      	mov	r3, r0
 8003f48:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f5c:	e005      	b.n	8003f6a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10b      	bne.n	8003f88 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f043 0206 	orr.w	r2, r3, #6
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f94:	b004      	add	sp, #16
 8003f96:	4770      	bx	lr

08003f98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d165      	bne.n	8004078 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4a41      	ldr	r2, [pc, #260]	; (80040b4 <USB_SetTurnaroundTime+0x11c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d906      	bls.n	8003fc2 <USB_SetTurnaroundTime+0x2a>
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <USB_SetTurnaroundTime+0x120>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d202      	bcs.n	8003fc2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fbc:	230f      	movs	r3, #15
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e062      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4a3c      	ldr	r2, [pc, #240]	; (80040b8 <USB_SetTurnaroundTime+0x120>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d306      	bcc.n	8003fd8 <USB_SetTurnaroundTime+0x40>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4a3b      	ldr	r2, [pc, #236]	; (80040bc <USB_SetTurnaroundTime+0x124>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d202      	bcs.n	8003fd8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fd2:	230e      	movs	r3, #14
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e057      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4a38      	ldr	r2, [pc, #224]	; (80040bc <USB_SetTurnaroundTime+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d306      	bcc.n	8003fee <USB_SetTurnaroundTime+0x56>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4a37      	ldr	r2, [pc, #220]	; (80040c0 <USB_SetTurnaroundTime+0x128>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d202      	bcs.n	8003fee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fe8:	230d      	movs	r3, #13
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e04c      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	4a33      	ldr	r2, [pc, #204]	; (80040c0 <USB_SetTurnaroundTime+0x128>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d306      	bcc.n	8004004 <USB_SetTurnaroundTime+0x6c>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <USB_SetTurnaroundTime+0x12c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d802      	bhi.n	8004004 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ffe:	230c      	movs	r3, #12
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	e041      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4a2f      	ldr	r2, [pc, #188]	; (80040c4 <USB_SetTurnaroundTime+0x12c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d906      	bls.n	800401a <USB_SetTurnaroundTime+0x82>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4a2e      	ldr	r2, [pc, #184]	; (80040c8 <USB_SetTurnaroundTime+0x130>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d802      	bhi.n	800401a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004014:	230b      	movs	r3, #11
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e036      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <USB_SetTurnaroundTime+0x130>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d906      	bls.n	8004030 <USB_SetTurnaroundTime+0x98>
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4a29      	ldr	r2, [pc, #164]	; (80040cc <USB_SetTurnaroundTime+0x134>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d802      	bhi.n	8004030 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800402a:	230a      	movs	r3, #10
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	e02b      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4a26      	ldr	r2, [pc, #152]	; (80040cc <USB_SetTurnaroundTime+0x134>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d906      	bls.n	8004046 <USB_SetTurnaroundTime+0xae>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <USB_SetTurnaroundTime+0x138>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d202      	bcs.n	8004046 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004040:	2309      	movs	r3, #9
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e020      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <USB_SetTurnaroundTime+0x138>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d306      	bcc.n	800405c <USB_SetTurnaroundTime+0xc4>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a20      	ldr	r2, [pc, #128]	; (80040d4 <USB_SetTurnaroundTime+0x13c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d802      	bhi.n	800405c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004056:	2308      	movs	r3, #8
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e015      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4a1d      	ldr	r2, [pc, #116]	; (80040d4 <USB_SetTurnaroundTime+0x13c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d906      	bls.n	8004072 <USB_SetTurnaroundTime+0xda>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <USB_SetTurnaroundTime+0x140>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d202      	bcs.n	8004072 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800406c:	2307      	movs	r3, #7
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e00a      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004072:	2306      	movs	r3, #6
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e007      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800407e:	2309      	movs	r3, #9
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e001      	b.n	8004088 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004084:	2309      	movs	r3, #9
 8004086:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	029b      	lsls	r3, r3, #10
 800409c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	00d8acbf 	.word	0x00d8acbf
 80040b8:	00e4e1c0 	.word	0x00e4e1c0
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	01067380 	.word	0x01067380
 80040c4:	011a499f 	.word	0x011a499f
 80040c8:	01312cff 	.word	0x01312cff
 80040cc:	014ca43f 	.word	0x014ca43f
 80040d0:	016e3600 	.word	0x016e3600
 80040d4:	01a6ab1f 	.word	0x01a6ab1f
 80040d8:	01e84800 	.word	0x01e84800

080040dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 0201 	bic.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d115      	bne.n	800416e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800414e:	2001      	movs	r0, #1
 8004150:	f7fc fe2a 	bl	8000da8 <HAL_Delay>
      ms++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f001 f972 	bl	8005444 <USB_GetMode>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d01e      	beq.n	80041a4 <USB_SetCurrentMode+0x84>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b31      	cmp	r3, #49	; 0x31
 800416a:	d9f0      	bls.n	800414e <USB_SetCurrentMode+0x2e>
 800416c:	e01a      	b.n	80041a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d115      	bne.n	80041a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004180:	2001      	movs	r0, #1
 8004182:	f7fc fe11 	bl	8000da8 <HAL_Delay>
      ms++;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3301      	adds	r3, #1
 800418a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f001 f959 	bl	8005444 <USB_GetMode>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <USB_SetCurrentMode+0x84>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b31      	cmp	r3, #49	; 0x31
 800419c:	d9f0      	bls.n	8004180 <USB_SetCurrentMode+0x60>
 800419e:	e001      	b.n	80041a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e005      	b.n	80041b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b32      	cmp	r3, #50	; 0x32
 80041a8:	d101      	bne.n	80041ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041b8:	b084      	sub	sp, #16
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	e009      	b.n	80041ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3340      	adds	r3, #64	; 0x40
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3301      	adds	r3, #1
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b0e      	cmp	r3, #14
 80041f0:	d9f2      	bls.n	80041d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d11c      	bne.n	8004232 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004206:	f043 0302 	orr.w	r3, r3, #2
 800420a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
 8004230:	e00b      	b.n	800424a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004236:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004250:	461a      	mov	r2, r3
 8004252:	2300      	movs	r3, #0
 8004254:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425c:	4619      	mov	r1, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	461a      	mov	r2, r3
 8004266:	680b      	ldr	r3, [r1, #0]
 8004268:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10c      	bne.n	800428a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d104      	bne.n	8004280 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004276:	2100      	movs	r1, #0
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f945 	bl	8004508 <USB_SetDevSpeed>
 800427e:	e008      	b.n	8004292 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004280:	2101      	movs	r1, #1
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f940 	bl	8004508 <USB_SetDevSpeed>
 8004288:	e003      	b.n	8004292 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800428a:	2103      	movs	r1, #3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f93b 	bl	8004508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004292:	2110      	movs	r1, #16
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f8f3 	bl	8004480 <USB_FlushTxFifo>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f90f 	bl	80044c8 <USB_FlushRxFifo>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	461a      	mov	r2, r3
 80042bc:	2300      	movs	r3, #0
 80042be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	461a      	mov	r2, r3
 80042c8:	2300      	movs	r3, #0
 80042ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e043      	b.n	8004366 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f4:	d118      	bne.n	8004328 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10a      	bne.n	8004312 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e013      	b.n	800433a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	461a      	mov	r2, r3
 8004320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	e008      	b.n	800433a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	2300      	movs	r3, #0
 8004338:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004358:	461a      	mov	r2, r3
 800435a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800435e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	3301      	adds	r3, #1
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d3b7      	bcc.n	80042de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e043      	b.n	80043fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800438a:	d118      	bne.n	80043be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e013      	b.n	80043d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	461a      	mov	r2, r3
 80043b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	e008      	b.n	80043d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ca:	461a      	mov	r2, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	2300      	movs	r3, #0
 80043e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	461a      	mov	r2, r3
 80043f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	3301      	adds	r3, #1
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	429a      	cmp	r2, r3
 8004402:	d3b7      	bcc.n	8004374 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004416:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004424:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	2b00      	cmp	r3, #0
 800442a:	d105      	bne.n	8004438 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f043 0210 	orr.w	r2, r3, #16
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699a      	ldr	r2, [r3, #24]
 800443c:	4b0f      	ldr	r3, [pc, #60]	; (800447c <USB_DevInit+0x2c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f043 0208 	orr.w	r2, r3, #8
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004464:	f043 0304 	orr.w	r3, r3, #4
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800446c:	7dfb      	ldrb	r3, [r7, #23]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004478:	b004      	add	sp, #16
 800447a:	4770      	bx	lr
 800447c:	803c3800 	.word	0x803c3800

08004480 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3301      	adds	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <USB_FlushTxFifo+0x44>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d901      	bls.n	80044aa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e006      	b.n	80044b8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d0f1      	beq.n	800449a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	00030d40 	.word	0x00030d40

080044c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2210      	movs	r2, #16
 80044d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3301      	adds	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	4a08      	ldr	r2, [pc, #32]	; (8004504 <USB_FlushRxFifo+0x3c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e006      	b.n	80044f8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b10      	cmp	r3, #16
 80044f4:	d0f1      	beq.n	80044da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	00030d40 	.word	0x00030d40

08004508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004528:	4313      	orrs	r3, r2
 800452a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800453a:	b480      	push	{r7}
 800453c:	b087      	sub	sp, #28
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f003 0306 	and.w	r3, r3, #6
 8004552:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800455a:	2300      	movs	r3, #0
 800455c:	75fb      	strb	r3, [r7, #23]
 800455e:	e00a      	b.n	8004576 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d002      	beq.n	800456c <USB_GetDevSpeed+0x32>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2b06      	cmp	r3, #6
 800456a:	d102      	bne.n	8004572 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800456c:	2302      	movs	r3, #2
 800456e:	75fb      	strb	r3, [r7, #23]
 8004570:	e001      	b.n	8004576 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004572:	230f      	movs	r3, #15
 8004574:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004576:	7dfb      	ldrb	r3, [r7, #23]
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d13a      	bne.n	8004616 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a6:	69da      	ldr	r2, [r3, #28]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045be:	4313      	orrs	r3, r2
 80045c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d155      	bne.n	8004684 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	78db      	ldrb	r3, [r3, #3]
 80045f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	059b      	lsls	r3, r3, #22
 80045fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80045fc:	4313      	orrs	r3, r2
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e036      	b.n	8004684 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	041b      	lsls	r3, r3, #16
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d11a      	bne.n	8004684 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	78db      	ldrb	r3, [r3, #3]
 8004668:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800466a:	430b      	orrs	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004682:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d161      	bne.n	8004774 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046c6:	d11f      	bne.n	8004708 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004706:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	b29b      	uxth	r3, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004728:	4013      	ands	r3, r2
 800472a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	2101      	movs	r1, #1
 800473e:	fa01 f303 	lsl.w	r3, r1, r3
 8004742:	b29b      	uxth	r3, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800474c:	4013      	ands	r3, r2
 800474e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	0159      	lsls	r1, r3, #5
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	440b      	add	r3, r1
 8004766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476a:	4619      	mov	r1, r3
 800476c:	4b35      	ldr	r3, [pc, #212]	; (8004844 <USB_DeactivateEndpoint+0x1b0>)
 800476e:	4013      	ands	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
 8004772:	e060      	b.n	8004836 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800478a:	d11f      	bne.n	80047cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	2101      	movs	r1, #1
 80047de:	fa01 f303 	lsl.w	r3, r1, r3
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	43db      	mvns	r3, r3
 80047e6:	68f9      	ldr	r1, [r7, #12]
 80047e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ec:	4013      	ands	r3, r2
 80047ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	2101      	movs	r1, #1
 8004802:	fa01 f303 	lsl.w	r3, r1, r3
 8004806:	041b      	lsls	r3, r3, #16
 8004808:	43db      	mvns	r3, r3
 800480a:	68f9      	ldr	r1, [r7, #12]
 800480c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004810:	4013      	ands	r3, r2
 8004812:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	0159      	lsls	r1, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	440b      	add	r3, r1
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	4619      	mov	r1, r3
 8004830:	4b05      	ldr	r3, [pc, #20]	; (8004848 <USB_DeactivateEndpoint+0x1b4>)
 8004832:	4013      	ands	r3, r2
 8004834:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	ec337800 	.word	0xec337800
 8004848:	eff37800 	.word	0xeff37800

0800484c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	2b01      	cmp	r3, #1
 800486a:	f040 815c 	bne.w	8004b26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d132      	bne.n	80048dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	0cdb      	lsrs	r3, r3, #19
 80048d6:	04db      	lsls	r3, r3, #19
 80048d8:	6113      	str	r3, [r2, #16]
 80048da:	e074      	b.n	80049c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f6:	0cdb      	lsrs	r3, r3, #19
 80048f8:	04db      	lsls	r3, r3, #19
 80048fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	69fa      	ldr	r2, [r7, #28]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800491a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800491e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6959      	ldr	r1, [r3, #20]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	440b      	add	r3, r1
 8004938:	1e59      	subs	r1, r3, #1
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004942:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004944:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <USB_EPStartXfer+0x370>)
 8004946:	400b      	ands	r3, r1
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	0148      	lsls	r0, r1, #5
 800494c:	69f9      	ldr	r1, [r7, #28]
 800494e:	4401      	add	r1, r0
 8004950:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800496e:	69b9      	ldr	r1, [r7, #24]
 8004970:	0148      	lsls	r0, r1, #5
 8004972:	69f9      	ldr	r1, [r7, #28]
 8004974:	4401      	add	r1, r0
 8004976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800497a:	4313      	orrs	r3, r2
 800497c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	78db      	ldrb	r3, [r3, #3]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d11f      	bne.n	80049c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d14b      	bne.n	8004a64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	78db      	ldrb	r3, [r3, #3]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d128      	bne.n	8004a42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d110      	bne.n	8004a22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	e00f      	b.n	8004a42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	0151      	lsls	r1, r2, #5
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	440a      	add	r2, r1
 8004a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e12f      	b.n	8004cc4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	78db      	ldrb	r3, [r3, #3]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d015      	beq.n	8004ab8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8117 	beq.w	8004cc4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	634b      	str	r3, [r1, #52]	; 0x34
 8004ab6:	e105      	b.n	8004cc4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d110      	bne.n	8004aea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	0151      	lsls	r1, r2, #5
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	440a      	add	r2, r1
 8004ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	e00f      	b.n	8004b0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	68d9      	ldr	r1, [r3, #12]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	b298      	uxth	r0, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fa2b 	bl	8004f7a <USB_WritePacket>
 8004b24:	e0ce      	b.n	8004cc4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b40:	0cdb      	lsrs	r3, r3, #19
 8004b42:	04db      	lsls	r3, r3, #19
 8004b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d126      	bne.n	8004bc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b88:	69b9      	ldr	r1, [r7, #24]
 8004b8a:	0148      	lsls	r0, r1, #5
 8004b8c:	69f9      	ldr	r1, [r7, #28]
 8004b8e:	4401      	add	r1, r0
 8004b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b94:	4313      	orrs	r3, r2
 8004b96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	0151      	lsls	r1, r2, #5
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	440a      	add	r2, r1
 8004bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bb6:	6113      	str	r3, [r2, #16]
 8004bb8:	e036      	b.n	8004c28 <USB_EPStartXfer+0x3dc>
 8004bba:	bf00      	nop
 8004bbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	695a      	ldr	r2, [r3, #20]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4413      	add	r3, r2
 8004bca:	1e5a      	subs	r2, r3, #1
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	8afb      	ldrh	r3, [r7, #22]
 8004be6:	04d9      	lsls	r1, r3, #19
 8004be8:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <USB_EPStartXfer+0x484>)
 8004bea:	400b      	ands	r3, r1
 8004bec:	69b9      	ldr	r1, [r7, #24]
 8004bee:	0148      	lsls	r0, r1, #5
 8004bf0:	69f9      	ldr	r1, [r7, #28]
 8004bf2:	4401      	add	r1, r0
 8004bf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	8af9      	ldrh	r1, [r7, #22]
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c18:	69b9      	ldr	r1, [r7, #24]
 8004c1a:	0148      	lsls	r0, r1, #5
 8004c1c:	69f9      	ldr	r1, [r7, #28]
 8004c1e:	4401      	add	r1, r0
 8004c20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c24:	4313      	orrs	r3, r2
 8004c26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10d      	bne.n	8004c4a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	68d9      	ldr	r1, [r3, #12]
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c46:	460a      	mov	r2, r1
 8004c48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	78db      	ldrb	r3, [r3, #3]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d128      	bne.n	8004ca4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d110      	bne.n	8004c84 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e00f      	b.n	8004ca4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	0151      	lsls	r1, r2, #5
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	440a      	add	r2, r1
 8004c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	1ff80000 	.word	0x1ff80000

08004cd4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	f040 80cd 	bne.w	8004e90 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d132      	bne.n	8004d64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5c:	0cdb      	lsrs	r3, r3, #19
 8004d5e:	04db      	lsls	r3, r3, #19
 8004d60:	6113      	str	r3, [r2, #16]
 8004d62:	e04e      	b.n	8004e02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	0cdb      	lsrs	r3, r3, #19
 8004d80:	04db      	lsls	r3, r3, #19
 8004d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004da2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004da6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d903      	bls.n	8004dbc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df2:	6939      	ldr	r1, [r7, #16]
 8004df4:	0148      	lsls	r0, r1, #5
 8004df6:	6979      	ldr	r1, [r7, #20]
 8004df8:	4401      	add	r1, r0
 8004dfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d11e      	bne.n	8004e46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e092      	b.n	8004f6c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	0151      	lsls	r1, r2, #5
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	440a      	add	r2, r1
 8004e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d07e      	beq.n	8004f6c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	2101      	movs	r1, #1
 8004e80:	fa01 f303 	lsl.w	r3, r1, r3
 8004e84:	6979      	ldr	r1, [r7, #20]
 8004e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	634b      	str	r3, [r1, #52]	; 0x34
 8004e8e:	e06d      	b.n	8004f6c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eaa:	0cdb      	lsrs	r3, r3, #19
 8004eac:	04db      	lsls	r3, r3, #19
 8004eae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ece:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ed2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	691a      	ldr	r2, [r3, #16]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1a:	6939      	ldr	r1, [r7, #16]
 8004f1c:	0148      	lsls	r0, r1, #5
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	4401      	add	r1, r0
 8004f22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f26:	4313      	orrs	r3, r2
 8004f28:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10d      	bne.n	8004f4c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	68d9      	ldr	r1, [r3, #12]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	460a      	mov	r2, r1
 8004f4a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b089      	sub	sp, #36	; 0x24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	4611      	mov	r1, r2
 8004f86:	461a      	mov	r2, r3
 8004f88:	460b      	mov	r3, r1
 8004f8a:	71fb      	strb	r3, [r7, #7]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d123      	bne.n	8004fe8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fa0:	88bb      	ldrh	r3, [r7, #4]
 8004fa2:	3303      	adds	r3, #3
 8004fa4:	089b      	lsrs	r3, r3, #2
 8004fa6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	e018      	b.n	8004fe0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	031a      	lsls	r2, r3, #12
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fba:	461a      	mov	r2, r3
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d3e2      	bcc.n	8004fae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3724      	adds	r7, #36	; 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b08b      	sub	sp, #44	; 0x2c
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	4613      	mov	r3, r2
 8005002:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	b29b      	uxth	r3, r3
 8005012:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800501c:	2300      	movs	r3, #0
 800501e:	623b      	str	r3, [r7, #32]
 8005020:	e014      	b.n	800504c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	601a      	str	r2, [r3, #0]
    pDest++;
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	3301      	adds	r3, #1
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	3301      	adds	r3, #1
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	3301      	adds	r3, #1
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	3301      	adds	r3, #1
 800504a:	623b      	str	r3, [r7, #32]
 800504c:	6a3a      	ldr	r2, [r7, #32]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	429a      	cmp	r2, r3
 8005052:	d3e6      	bcc.n	8005022 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005054:	8bfb      	ldrh	r3, [r7, #30]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01e      	beq.n	8005098 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800505a:	2300      	movs	r3, #0
 800505c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005064:	461a      	mov	r2, r3
 8005066:	f107 0310 	add.w	r3, r7, #16
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	fa22 f303 	lsr.w	r3, r2, r3
 800507a:	b2da      	uxtb	r2, r3
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	701a      	strb	r2, [r3, #0]
      i++;
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	3301      	adds	r3, #1
 8005084:	623b      	str	r3, [r7, #32]
      pDest++;
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	3301      	adds	r3, #1
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800508c:	8bfb      	ldrh	r3, [r7, #30]
 800508e:	3b01      	subs	r3, #1
 8005090:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005092:	8bfb      	ldrh	r3, [r7, #30]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1ea      	bne.n	800506e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800509a:	4618      	mov	r0, r3
 800509c:	372c      	adds	r7, #44	; 0x2c
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d12c      	bne.n	800511c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	db12      	blt.n	80050fa <USB_EPSetStall+0x54>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00f      	beq.n	80050fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	e02b      	b.n	8005174 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	db12      	blt.n	8005154 <USB_EPSetStall+0xae>
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00f      	beq.n	8005154 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005152:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	785b      	ldrb	r3, [r3, #1]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d128      	bne.n	80051f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d003      	beq.n	80051ce <USB_EPClearStall+0x4c>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	78db      	ldrb	r3, [r3, #3]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d138      	bne.n	8005240 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	e027      	b.n	8005240 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800520a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800520e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	78db      	ldrb	r3, [r3, #3]
 8005214:	2b03      	cmp	r3, #3
 8005216:	d003      	beq.n	8005220 <USB_EPClearStall+0x9e>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d10f      	bne.n	8005240 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005270:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	011b      	lsls	r3, r3, #4
 800527e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052b4:	f023 0303 	bic.w	r3, r3, #3
 80052b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c8:	f023 0302 	bic.w	r3, r3, #2
 80052cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr

0800531e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800531e:	b480      	push	{r7}
 8005320:	b085      	sub	sp, #20
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4013      	ands	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4013      	ands	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	0c1b      	lsrs	r3, r3, #16
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	4013      	ands	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	b29b      	uxth	r3, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	4013      	ands	r3, r2
 80053d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053da:	68bb      	ldr	r3, [r7, #8]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	01db      	lsls	r3, r3, #7
 800541a:	b2db      	uxtb	r3, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005436:	68bb      	ldr	r3, [r7, #8]
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0301 	and.w	r3, r3, #1
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800547e:	f023 0307 	bic.w	r3, r3, #7
 8005482:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005496:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
	...

080054a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	460b      	mov	r3, r1
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	333c      	adds	r3, #60	; 0x3c
 80054be:	3304      	adds	r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4a26      	ldr	r2, [pc, #152]	; (8005560 <USB_EP0_OutStart+0xb8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d90a      	bls.n	80054e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054dc:	d101      	bne.n	80054e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	e037      	b.n	8005552 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e8:	461a      	mov	r2, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005500:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005510:	f043 0318 	orr.w	r3, r3, #24
 8005514:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005524:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005528:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800552a:	7afb      	ldrb	r3, [r7, #11]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d10f      	bne.n	8005550 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800554e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	4f54300a 	.word	0x4f54300a

08005564 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3301      	adds	r3, #1
 8005574:	60fb      	str	r3, [r7, #12]
 8005576:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <USB_CoreReset+0x60>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d901      	bls.n	8005580 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e01a      	b.n	80055b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	daf3      	bge.n	8005570 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f043 0201 	orr.w	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <USB_CoreReset+0x60>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d901      	bls.n	80055a8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e006      	b.n	80055b6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d0f1      	beq.n	8005598 <USB_CoreReset+0x34>

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	00030d40 	.word	0x00030d40

080055c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80055d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80055d8:	f002 f972 	bl	80078c0 <USBD_static_malloc>
 80055dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80055ec:	2302      	movs	r3, #2
 80055ee:	e066      	b.n	80056be <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	7c1b      	ldrb	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d119      	bne.n	8005634 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005604:	2202      	movs	r2, #2
 8005606:	2181      	movs	r1, #129	; 0x81
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f002 f836 	bl	800767a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005618:	2202      	movs	r2, #2
 800561a:	2101      	movs	r1, #1
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f002 f82c 	bl	800767a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2210      	movs	r2, #16
 800562e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005632:	e016      	b.n	8005662 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	2202      	movs	r2, #2
 8005638:	2181      	movs	r1, #129	; 0x81
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f002 f81d 	bl	800767a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005646:	2340      	movs	r3, #64	; 0x40
 8005648:	2202      	movs	r2, #2
 800564a:	2101      	movs	r1, #1
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f002 f814 	bl	800767a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2210      	movs	r2, #16
 800565e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005662:	2308      	movs	r3, #8
 8005664:	2203      	movs	r2, #3
 8005666:	2182      	movs	r1, #130	; 0x82
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f002 f806 	bl	800767a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7c1b      	ldrb	r3, [r3, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800569e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056a2:	2101      	movs	r1, #1
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f002 f8d7 	bl	8007858 <USBD_LL_PrepareReceive>
 80056aa:	e007      	b.n	80056bc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056b2:	2340      	movs	r3, #64	; 0x40
 80056b4:	2101      	movs	r1, #1
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f002 f8ce 	bl	8007858 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b082      	sub	sp, #8
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80056d2:	2181      	movs	r1, #129	; 0x81
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 fff6 	bl	80076c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056e0:	2101      	movs	r1, #1
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 ffef 	bl	80076c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80056f0:	2182      	movs	r1, #130	; 0x82
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 ffe7 	bl	80076c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00e      	beq.n	8005730 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005722:	4618      	mov	r0, r3
 8005724:	f002 f8da 	bl	80078dc <USBD_static_free>
    pdev->pClassData = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800574c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005760:	2303      	movs	r3, #3
 8005762:	e0af      	b.n	80058c4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800576c:	2b00      	cmp	r3, #0
 800576e:	d03f      	beq.n	80057f0 <USBD_CDC_Setup+0xb4>
 8005770:	2b20      	cmp	r3, #32
 8005772:	f040 809f 	bne.w	80058b4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	88db      	ldrh	r3, [r3, #6]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d02e      	beq.n	80057dc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	b25b      	sxtb	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	da16      	bge.n	80057b6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005794:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	88d2      	ldrh	r2, [r2, #6]
 800579a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	88db      	ldrh	r3, [r3, #6]
 80057a0:	2b07      	cmp	r3, #7
 80057a2:	bf28      	it	cs
 80057a4:	2307      	movcs	r3, #7
 80057a6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	89fa      	ldrh	r2, [r7, #14]
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 fb19 	bl	8006de6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80057b4:	e085      	b.n	80058c2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	785a      	ldrb	r2, [r3, #1]
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	88db      	ldrh	r3, [r3, #6]
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80057cc:	6939      	ldr	r1, [r7, #16]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	88db      	ldrh	r3, [r3, #6]
 80057d2:	461a      	mov	r2, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fb32 	bl	8006e3e <USBD_CtlPrepareRx>
      break;
 80057da:	e072      	b.n	80058c2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	7850      	ldrb	r0, [r2, #1]
 80057e8:	2200      	movs	r2, #0
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	4798      	blx	r3
      break;
 80057ee:	e068      	b.n	80058c2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	785b      	ldrb	r3, [r3, #1]
 80057f4:	2b0b      	cmp	r3, #11
 80057f6:	d852      	bhi.n	800589e <USBD_CDC_Setup+0x162>
 80057f8:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <USBD_CDC_Setup+0xc4>)
 80057fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fe:	bf00      	nop
 8005800:	08005831 	.word	0x08005831
 8005804:	080058ad 	.word	0x080058ad
 8005808:	0800589f 	.word	0x0800589f
 800580c:	0800589f 	.word	0x0800589f
 8005810:	0800589f 	.word	0x0800589f
 8005814:	0800589f 	.word	0x0800589f
 8005818:	0800589f 	.word	0x0800589f
 800581c:	0800589f 	.word	0x0800589f
 8005820:	0800589f 	.word	0x0800589f
 8005824:	0800589f 	.word	0x0800589f
 8005828:	0800585b 	.word	0x0800585b
 800582c:	08005885 	.word	0x08005885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d107      	bne.n	800584c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800583c:	f107 030a 	add.w	r3, r7, #10
 8005840:	2202      	movs	r2, #2
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 face 	bl	8006de6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800584a:	e032      	b.n	80058b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fa58 	bl	8006d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8005854:	2303      	movs	r3, #3
 8005856:	75fb      	strb	r3, [r7, #23]
          break;
 8005858:	e02b      	b.n	80058b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005866:	f107 030d 	add.w	r3, r7, #13
 800586a:	2201      	movs	r2, #1
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fab9 	bl	8006de6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005874:	e01d      	b.n	80058b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fa43 	bl	8006d04 <USBD_CtlError>
            ret = USBD_FAIL;
 800587e:	2303      	movs	r3, #3
 8005880:	75fb      	strb	r3, [r7, #23]
          break;
 8005882:	e016      	b.n	80058b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b03      	cmp	r3, #3
 800588e:	d00f      	beq.n	80058b0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 fa36 	bl	8006d04 <USBD_CtlError>
            ret = USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800589c:	e008      	b.n	80058b0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fa2f 	bl	8006d04 <USBD_CtlError>
          ret = USBD_FAIL;
 80058a6:	2303      	movs	r3, #3
 80058a8:	75fb      	strb	r3, [r7, #23]
          break;
 80058aa:	e002      	b.n	80058b2 <USBD_CDC_Setup+0x176>
          break;
 80058ac:	bf00      	nop
 80058ae:	e008      	b.n	80058c2 <USBD_CDC_Setup+0x186>
          break;
 80058b0:	bf00      	nop
      }
      break;
 80058b2:	e006      	b.n	80058c2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fa24 	bl	8006d04 <USBD_CtlError>
      ret = USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	75fb      	strb	r3, [r7, #23]
      break;
 80058c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80058de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e04f      	b.n	800598e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	3318      	adds	r3, #24
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d029      	beq.n	8005960 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	3318      	adds	r3, #24
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	78f9      	ldrb	r1, [r7, #3]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	460b      	mov	r3, r1
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	1a5b      	subs	r3, r3, r1
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4403      	add	r3, r0
 800592c:	3344      	adds	r3, #68	; 0x44
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	fbb2 f1f3 	udiv	r1, r2, r3
 8005934:	fb03 f301 	mul.w	r3, r3, r1
 8005938:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800593a:	2b00      	cmp	r3, #0
 800593c:	d110      	bne.n	8005960 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800593e:	78fa      	ldrb	r2, [r7, #3]
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	440b      	add	r3, r1
 800594c:	3318      	adds	r3, #24
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005952:	78f9      	ldrb	r1, [r7, #3]
 8005954:	2300      	movs	r3, #0
 8005956:	2200      	movs	r2, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f001 ff5c 	bl	8007816 <USBD_LL_Transmit>
 800595e:	e015      	b.n	800598c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005988:	78fa      	ldrb	r2, [r7, #3]
 800598a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e015      	b.n	80059e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 ff6c 	bl	800789a <USBD_LL_GetRxDataSize>
 80059c2:	4602      	mov	r2, r0
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80059de:	4611      	mov	r1, r2
 80059e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e01b      	b.n	8005a3e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <USBD_CDC_EP0_RxReady+0x50>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a16:	2bff      	cmp	r3, #255	; 0xff
 8005a18:	d010      	beq.n	8005a3c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005a28:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a30:	b292      	uxth	r2, r2
 8005a32:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	22ff      	movs	r2, #255	; 0xff
 8005a38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2243      	movs	r2, #67	; 0x43
 8005a54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005a56:	4b03      	ldr	r3, [pc, #12]	; (8005a64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	20000094 	.word	0x20000094

08005a68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2243      	movs	r2, #67	; 0x43
 8005a74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005a76:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	20000050 	.word	0x20000050

08005a88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2243      	movs	r2, #67	; 0x43
 8005a94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005a96:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	200000d8 	.word	0x200000d8

08005aa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	2000000c 	.word	0x2000000c

08005ac8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e004      	b.n	8005ae6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b087      	sub	sp, #28
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b04:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e008      	b.n	8005b22 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e004      	b.n	8005b54 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b6e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e01a      	b.n	8005bb8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d114      	bne.n	8005bb6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005baa:	2181      	movs	r1, #129	; 0x81
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f001 fe32 	bl	8007816 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e016      	b.n	8005c0c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7c1b      	ldrb	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 fe30 	bl	8007858 <USBD_LL_PrepareReceive>
 8005bf8:	e007      	b.n	8005c0a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	2101      	movs	r1, #1
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 fe27 	bl	8007858 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e01f      	b.n	8005c6c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	79fa      	ldrb	r2, [r7, #7]
 8005c5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f001 fca3 	bl	80075ac <USBD_LL_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e016      	b.n	8005cba <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f107 020e 	add.w	r2, r7, #14
 8005cac:	4610      	mov	r0, r2
 8005cae:	4798      	blx	r3
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fcba 	bl	8007644 <USBD_LL_Start>
 8005cd0:	4603      	mov	r3, r0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	4611      	mov	r1, r2
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
  }

  return USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 ff90 	bl	8006c90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d01a      	beq.n	8005dca <USBD_LL_SetupStage+0x72>
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d822      	bhi.n	8005dde <USBD_LL_SetupStage+0x86>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <USBD_LL_SetupStage+0x4a>
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d00a      	beq.n	8005db6 <USBD_LL_SetupStage+0x5e>
 8005da0:	e01d      	b.n	8005dde <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa62 	bl	8006274 <USBD_StdDevReq>
 8005db0:	4603      	mov	r3, r0
 8005db2:	73fb      	strb	r3, [r7, #15]
      break;
 8005db4:	e020      	b.n	8005df8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fac6 	bl	8006350 <USBD_StdItfReq>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc8:	e016      	b.n	8005df8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb05 	bl	80063e2 <USBD_StdEPReq>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
      break;
 8005ddc:	e00c      	b.n	8005df8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005de4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fc89 	bl	8007704 <USBD_LL_StallEP>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73fb      	strb	r3, [r7, #15]
      break;
 8005df6:	bf00      	nop
  }

  return ret;
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e10:	7afb      	ldrb	r3, [r7, #11]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d138      	bne.n	8005e88 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d14a      	bne.n	8005ebe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d913      	bls.n	8005e5c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	1ad2      	subs	r2, r2, r3
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	68da      	ldr	r2, [r3, #12]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	bf28      	it	cs
 8005e4e:	4613      	movcs	r3, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f001 f80f 	bl	8006e78 <USBD_CtlContinueRx>
 8005e5a:	e030      	b.n	8005ebe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d10b      	bne.n	8005e80 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f001 f80a 	bl	8006e9a <USBD_CtlSendStatus>
 8005e86:	e01a      	b.n	8005ebe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d114      	bne.n	8005ebe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00e      	beq.n	8005ebe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	7afa      	ldrb	r2, [r7, #11]
 8005eaa:	4611      	mov	r1, r2
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	4798      	blx	r3
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005eb4:	7dfb      	ldrb	r3, [r7, #23]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	e000      	b.n	8005ec0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d16b      	bne.n	8005fb4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3314      	adds	r3, #20
 8005ee0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d156      	bne.n	8005f9a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d914      	bls.n	8005f22 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	1ad2      	subs	r2, r2, r3
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 ff84 	bl	8006e1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f14:	2300      	movs	r3, #0
 8005f16:	2200      	movs	r2, #0
 8005f18:	2100      	movs	r1, #0
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f001 fc9c 	bl	8007858 <USBD_LL_PrepareReceive>
 8005f20:	e03b      	b.n	8005f9a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d11c      	bne.n	8005f68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d316      	bcc.n	8005f68 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d20f      	bcs.n	8005f68 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 ff65 	bl	8006e1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f001 fc79 	bl	8007858 <USBD_LL_PrepareReceive>
 8005f66:	e018      	b.n	8005f9a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d10b      	bne.n	8005f8c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f8c:	2180      	movs	r1, #128	; 0x80
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 fbb8 	bl	8007704 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 ff93 	bl	8006ec0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d122      	bne.n	8005fea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff fe98 	bl	8005cda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fb2:	e01a      	b.n	8005fea <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d114      	bne.n	8005fea <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00e      	beq.n	8005fea <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd2:	695b      	ldr	r3, [r3, #20]
 8005fd4:	7afa      	ldrb	r2, [r7, #11]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	4798      	blx	r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	e000      	b.n	8005fec <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	e02f      	b.n	8006088 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00f      	beq.n	8006052 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6852      	ldr	r2, [r2, #4]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	4611      	mov	r1, r2
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006052:	2340      	movs	r3, #64	; 0x40
 8006054:	2200      	movs	r2, #0
 8006056:	2100      	movs	r1, #0
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 fb0e 	bl	800767a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2240      	movs	r2, #64	; 0x40
 800606a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800606e:	2340      	movs	r3, #64	; 0x40
 8006070:	2200      	movs	r2, #0
 8006072:	2180      	movs	r1, #128	; 0x80
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f001 fb00 	bl	800767a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2240      	movs	r2, #64	; 0x40
 8006084:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d106      	bne.n	80060fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800611e:	2303      	movs	r3, #3
 8006120:	e012      	b.n	8006148 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d10b      	bne.n	8006146 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006166:	2303      	movs	r3, #3
 8006168:	e014      	b.n	8006194 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b03      	cmp	r3, #3
 8006174:	d10d      	bne.n	8006192 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	78fa      	ldrb	r2, [r7, #3]
 800618c:	4611      	mov	r1, r2
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e014      	b.n	80061e0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d10d      	bne.n	80061de <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	4611      	mov	r1, r2
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	6852      	ldr	r2, [r2, #4]
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	4611      	mov	r1, r2
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
  }

  return USBD_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006236:	b480      	push	{r7}
 8006238:	b087      	sub	sp, #28
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	3301      	adds	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006254:	8a3b      	ldrh	r3, [r7, #16]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	b21a      	sxth	r2, r3
 800625a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800625e:	4313      	orrs	r3, r2
 8006260:	b21b      	sxth	r3, r3
 8006262:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006264:	89fb      	ldrh	r3, [r7, #14]
}
 8006266:	4618      	mov	r0, r3
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d005      	beq.n	800629a <USBD_StdDevReq+0x26>
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d853      	bhi.n	800633a <USBD_StdDevReq+0xc6>
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00b      	beq.n	80062ae <USBD_StdDevReq+0x3a>
 8006296:	2b20      	cmp	r3, #32
 8006298:	d14f      	bne.n	800633a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	4798      	blx	r3
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
      break;
 80062ac:	e04a      	b.n	8006344 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	2b09      	cmp	r3, #9
 80062b4:	d83b      	bhi.n	800632e <USBD_StdDevReq+0xba>
 80062b6:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <USBD_StdDevReq+0x48>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	08006311 	.word	0x08006311
 80062c0:	08006325 	.word	0x08006325
 80062c4:	0800632f 	.word	0x0800632f
 80062c8:	0800631b 	.word	0x0800631b
 80062cc:	0800632f 	.word	0x0800632f
 80062d0:	080062ef 	.word	0x080062ef
 80062d4:	080062e5 	.word	0x080062e5
 80062d8:	0800632f 	.word	0x0800632f
 80062dc:	08006307 	.word	0x08006307
 80062e0:	080062f9 	.word	0x080062f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9de 	bl	80066a8 <USBD_GetDescriptor>
          break;
 80062ec:	e024      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb43 	bl	800697c <USBD_SetAddress>
          break;
 80062f6:	e01f      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fb82 	bl	8006a04 <USBD_SetConfig>
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
          break;
 8006304:	e018      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc21 	bl	8006b50 <USBD_GetConfig>
          break;
 800630e:	e013      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fc52 	bl	8006bbc <USBD_GetStatus>
          break;
 8006318:	e00e      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fc81 	bl	8006c24 <USBD_SetFeature>
          break;
 8006322:	e009      	b.n	8006338 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fc90 	bl	8006c4c <USBD_ClrFeature>
          break;
 800632c:	e004      	b.n	8006338 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fce7 	bl	8006d04 <USBD_CtlError>
          break;
 8006336:	bf00      	nop
      }
      break;
 8006338:	e004      	b.n	8006344 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fce1 	bl	8006d04 <USBD_CtlError>
      break;
 8006342:	bf00      	nop
  }

  return ret;
 8006344:	7bfb      	ldrb	r3, [r7, #15]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop

08006350 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d005      	beq.n	8006376 <USBD_StdItfReq+0x26>
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	d82f      	bhi.n	80063ce <USBD_StdItfReq+0x7e>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <USBD_StdItfReq+0x26>
 8006372:	2b20      	cmp	r3, #32
 8006374:	d12b      	bne.n	80063ce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637c:	b2db      	uxtb	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	2b02      	cmp	r3, #2
 8006382:	d81d      	bhi.n	80063c0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d813      	bhi.n	80063b6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	88db      	ldrh	r3, [r3, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d110      	bne.n	80063ca <USBD_StdItfReq+0x7a>
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10d      	bne.n	80063ca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fd73 	bl	8006e9a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80063b4:	e009      	b.n	80063ca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fca3 	bl	8006d04 <USBD_CtlError>
          break;
 80063be:	e004      	b.n	80063ca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fc9e 	bl	8006d04 <USBD_CtlError>
          break;
 80063c8:	e000      	b.n	80063cc <USBD_StdItfReq+0x7c>
          break;
 80063ca:	bf00      	nop
      }
      break;
 80063cc:	e004      	b.n	80063d8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fc97 	bl	8006d04 <USBD_CtlError>
      break;
 80063d6:	bf00      	nop
  }

  return ret;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	889b      	ldrh	r3, [r3, #4]
 80063f4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063fe:	2b40      	cmp	r3, #64	; 0x40
 8006400:	d007      	beq.n	8006412 <USBD_StdEPReq+0x30>
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	f200 8145 	bhi.w	8006692 <USBD_StdEPReq+0x2b0>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00c      	beq.n	8006426 <USBD_StdEPReq+0x44>
 800640c:	2b20      	cmp	r3, #32
 800640e:	f040 8140 	bne.w	8006692 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
 8006420:	4603      	mov	r3, r0
 8006422:	73fb      	strb	r3, [r7, #15]
      break;
 8006424:	e13a      	b.n	800669c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2b03      	cmp	r3, #3
 800642c:	d007      	beq.n	800643e <USBD_StdEPReq+0x5c>
 800642e:	2b03      	cmp	r3, #3
 8006430:	f300 8129 	bgt.w	8006686 <USBD_StdEPReq+0x2a4>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d07f      	beq.n	8006538 <USBD_StdEPReq+0x156>
 8006438:	2b01      	cmp	r3, #1
 800643a:	d03c      	beq.n	80064b6 <USBD_StdEPReq+0xd4>
 800643c:	e123      	b.n	8006686 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b02      	cmp	r3, #2
 8006448:	d002      	beq.n	8006450 <USBD_StdEPReq+0x6e>
 800644a:	2b03      	cmp	r3, #3
 800644c:	d016      	beq.n	800647c <USBD_StdEPReq+0x9a>
 800644e:	e02c      	b.n	80064aa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <USBD_StdEPReq+0x90>
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b80      	cmp	r3, #128	; 0x80
 800645a:	d00a      	beq.n	8006472 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 f94f 	bl	8007704 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f001 f94b 	bl	8007704 <USBD_LL_StallEP>
 800646e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006470:	e020      	b.n	80064b4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc45 	bl	8006d04 <USBD_CtlError>
              break;
 800647a:	e01b      	b.n	80064b4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	885b      	ldrh	r3, [r3, #2]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10e      	bne.n	80064a2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <USBD_StdEPReq+0xc0>
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	2b80      	cmp	r3, #128	; 0x80
 800648e:	d008      	beq.n	80064a2 <USBD_StdEPReq+0xc0>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	88db      	ldrh	r3, [r3, #6]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 f931 	bl	8007704 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fcf9 	bl	8006e9a <USBD_CtlSendStatus>

              break;
 80064a8:	e004      	b.n	80064b4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc29 	bl	8006d04 <USBD_CtlError>
              break;
 80064b2:	bf00      	nop
          }
          break;
 80064b4:	e0ec      	b.n	8006690 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d002      	beq.n	80064c8 <USBD_StdEPReq+0xe6>
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d016      	beq.n	80064f4 <USBD_StdEPReq+0x112>
 80064c6:	e030      	b.n	800652a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <USBD_StdEPReq+0x108>
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d00a      	beq.n	80064ea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f001 f913 	bl	8007704 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064de:	2180      	movs	r1, #128	; 0x80
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f90f 	bl	8007704 <USBD_LL_StallEP>
 80064e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064e8:	e025      	b.n	8006536 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fc09 	bl	8006d04 <USBD_CtlError>
              break;
 80064f2:	e020      	b.n	8006536 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	885b      	ldrh	r3, [r3, #2]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d11b      	bne.n	8006534 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006502:	2b00      	cmp	r3, #0
 8006504:	d004      	beq.n	8006510 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	4619      	mov	r1, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 f919 	bl	8007742 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fcc2 	bl	8006e9a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	4798      	blx	r3
 8006524:	4603      	mov	r3, r0
 8006526:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006528:	e004      	b.n	8006534 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fbe9 	bl	8006d04 <USBD_CtlError>
              break;
 8006532:	e000      	b.n	8006536 <USBD_StdEPReq+0x154>
              break;
 8006534:	bf00      	nop
          }
          break;
 8006536:	e0ab      	b.n	8006690 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d002      	beq.n	800654a <USBD_StdEPReq+0x168>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d032      	beq.n	80065ae <USBD_StdEPReq+0x1cc>
 8006548:	e097      	b.n	800667a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <USBD_StdEPReq+0x17e>
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	2b80      	cmp	r3, #128	; 0x80
 8006554:	d004      	beq.n	8006560 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fbd3 	bl	8006d04 <USBD_CtlError>
                break;
 800655e:	e091      	b.n	8006684 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006560:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da0b      	bge.n	8006580 <USBD_StdEPReq+0x19e>
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	3310      	adds	r3, #16
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	3304      	adds	r3, #4
 800657e:	e00b      	b.n	8006598 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	3304      	adds	r3, #4
 8006598:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2202      	movs	r2, #2
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fc1d 	bl	8006de6 <USBD_CtlSendData>
              break;
 80065ac:	e06a      	b.n	8006684 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da11      	bge.n	80065da <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b6:	7bbb      	ldrb	r3, [r7, #14]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	3324      	adds	r3, #36	; 0x24
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d117      	bne.n	8006600 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb96 	bl	8006d04 <USBD_CtlError>
                  break;
 80065d8:	e054      	b.n	8006684 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	f003 020f 	and.w	r2, r3, #15
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fb83 	bl	8006d04 <USBD_CtlError>
                  break;
 80065fe:	e041      	b.n	8006684 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006600:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006604:	2b00      	cmp	r3, #0
 8006606:	da0b      	bge.n	8006620 <USBD_StdEPReq+0x23e>
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660e:	4613      	mov	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	3310      	adds	r3, #16
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	e00b      	b.n	8006638 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	3304      	adds	r3, #4
 8006638:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <USBD_StdEPReq+0x264>
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d103      	bne.n	800664e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e00e      	b.n	800666c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f894 	bl	8007780 <USBD_LL_IsStallEP>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2201      	movs	r2, #1
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e002      	b.n	800666c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2202      	movs	r2, #2
 8006670:	4619      	mov	r1, r3
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fbb7 	bl	8006de6 <USBD_CtlSendData>
              break;
 8006678:	e004      	b.n	8006684 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb41 	bl	8006d04 <USBD_CtlError>
              break;
 8006682:	bf00      	nop
          }
          break;
 8006684:	e004      	b.n	8006690 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb3b 	bl	8006d04 <USBD_CtlError>
          break;
 800668e:	bf00      	nop
      }
      break;
 8006690:	e004      	b.n	800669c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fb35 	bl	8006d04 <USBD_CtlError>
      break;
 800669a:	bf00      	nop
  }

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	f200 8128 	bhi.w	800691e <USBD_GetDescriptor+0x276>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <USBD_GetDescriptor+0x2c>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	08006709 	.word	0x08006709
 80066dc:	08006749 	.word	0x08006749
 80066e0:	0800691f 	.word	0x0800691f
 80066e4:	0800691f 	.word	0x0800691f
 80066e8:	080068bf 	.word	0x080068bf
 80066ec:	080068eb 	.word	0x080068eb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
      break;
 8006706:	e112      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10d      	bne.n	800672c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f107 0208 	add.w	r2, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800672a:	e100      	b.n	800692e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f107 0208 	add.w	r2, r7, #8
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	2202      	movs	r2, #2
 8006744:	701a      	strb	r2, [r3, #0]
      break;
 8006746:	e0f2      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	885b      	ldrh	r3, [r3, #2]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b05      	cmp	r3, #5
 8006750:	f200 80ac 	bhi.w	80068ac <USBD_GetDescriptor+0x204>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USBD_GetDescriptor+0xb4>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006775 	.word	0x08006775
 8006760:	080067a9 	.word	0x080067a9
 8006764:	080067dd 	.word	0x080067dd
 8006768:	08006811 	.word	0x08006811
 800676c:	08006845 	.word	0x08006845
 8006770:	08006879 	.word	0x08006879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e091      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fab2 	bl	8006d04 <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e089      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ca:	e077      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fa98 	bl	8006d04 <USBD_CtlError>
            err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
          break;
 80067da:	e06f      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	f107 0108 	add.w	r1, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fe:	e05d      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa7e 	bl	8006d04 <USBD_CtlError>
            err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
          break;
 800680e:	e055      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006832:	e043      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa64 	bl	8006d04 <USBD_CtlError>
            err++;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	3301      	adds	r3, #1
 8006840:	72fb      	strb	r3, [r7, #11]
          break;
 8006842:	e03b      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7c12      	ldrb	r2, [r2, #16]
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006866:	e029      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa4a 	bl	8006d04 <USBD_CtlError>
            err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
          break;
 8006876:	e021      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689a:	e00f      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa30 	bl	8006d04 <USBD_CtlError>
            err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
          break;
 80068aa:	e007      	b.n	80068bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa28 	bl	8006d04 <USBD_CtlError>
          err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80068ba:	bf00      	nop
      }
      break;
 80068bc:	e037      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7c1b      	ldrb	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	4610      	mov	r0, r2
 80068d4:	4798      	blx	r3
 80068d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d8:	e029      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa11 	bl	8006d04 <USBD_CtlError>
        err++;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	3301      	adds	r3, #1
 80068e6:	72fb      	strb	r3, [r7, #11]
      break;
 80068e8:	e021      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10d      	bne.n	800690e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	4610      	mov	r0, r2
 8006900:	4798      	blx	r3
 8006902:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	2207      	movs	r2, #7
 800690a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800690c:	e00f      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9f7 	bl	8006d04 <USBD_CtlError>
        err++;
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	3301      	adds	r3, #1
 800691a:	72fb      	strb	r3, [r7, #11]
      break;
 800691c:	e007      	b.n	800692e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f9ef 	bl	8006d04 <USBD_CtlError>
      err++;
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	3301      	adds	r3, #1
 800692a:	72fb      	strb	r3, [r7, #11]
      break;
 800692c:	bf00      	nop
  }

  if (err != 0U)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11e      	bne.n	8006972 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88da      	ldrh	r2, [r3, #6]
 8006946:	893b      	ldrh	r3, [r7, #8]
 8006948:	4293      	cmp	r3, r2
 800694a:	bf28      	it	cs
 800694c:	4613      	movcs	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	461a      	mov	r2, r3
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa44 	bl	8006de6 <USBD_CtlSendData>
 800695e:	e009      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9ce 	bl	8006d04 <USBD_CtlError>
 8006968:	e004      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fa95 	bl	8006e9a <USBD_CtlSendStatus>
 8006970:	e000      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    return;
 8006972:	bf00      	nop
  }
}
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	889b      	ldrh	r3, [r3, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d131      	bne.n	80069f2 <USBD_SetAddress+0x76>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	88db      	ldrh	r3, [r3, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d12d      	bne.n	80069f2 <USBD_SetAddress+0x76>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	885b      	ldrh	r3, [r3, #2]
 800699a:	2b7f      	cmp	r3, #127	; 0x7f
 800699c:	d829      	bhi.n	80069f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d104      	bne.n	80069c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9a3 	bl	8006d04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069be:	e01d      	b.n	80069fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7bfa      	ldrb	r2, [r7, #15]
 80069c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 ff03 	bl	80077d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa61 	bl	8006e9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	e009      	b.n	80069fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	e004      	b.n	80069fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f985 	bl	8006d04 <USBD_CtlError>
  }
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	885b      	ldrh	r3, [r3, #2]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	4b4c      	ldr	r3, [pc, #304]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a1c:	4b4b      	ldr	r3, [pc, #300]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d905      	bls.n	8006a30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f96c 	bl	8006d04 <USBD_CtlError>
    return USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e088      	b.n	8006b42 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d002      	beq.n	8006a42 <USBD_SetConfig+0x3e>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d025      	beq.n	8006a8c <USBD_SetConfig+0x88>
 8006a40:	e071      	b.n	8006b26 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a42:	4b42      	ldr	r3, [pc, #264]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01c      	beq.n	8006a84 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006a4a:	4b40      	ldr	r3, [pc, #256]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a54:	4b3d      	ldr	r3, [pc, #244]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7ff f948 	bl	8005cf0 <USBD_SetClassConfig>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d004      	beq.n	8006a74 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f949 	bl	8006d04 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a72:	e065      	b.n	8006b40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fa10 	bl	8006e9a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a82:	e05d      	b.n	8006b40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fa08 	bl	8006e9a <USBD_CtlSendStatus>
      break;
 8006a8a:	e059      	b.n	8006b40 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a8c:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d112      	bne.n	8006aba <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	; (8006b4c <USBD_SetConfig+0x148>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006aa6:	4b29      	ldr	r3, [pc, #164]	; (8006b4c <USBD_SetConfig+0x148>)
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff f93b 	bl	8005d28 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f9f1 	bl	8006e9a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ab8:	e042      	b.n	8006b40 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006aba:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <USBD_SetConfig+0x148>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d02a      	beq.n	8006b1e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff f929 	bl	8005d28 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ad6:	4b1d      	ldr	r3, [pc, #116]	; (8006b4c <USBD_SetConfig+0x148>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ae0:	4b1a      	ldr	r3, [pc, #104]	; (8006b4c <USBD_SetConfig+0x148>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff f902 	bl	8005cf0 <USBD_SetClassConfig>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00f      	beq.n	8006b16 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 f903 	bl	8006d04 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff f90e 	bl	8005d28 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b14:	e014      	b.n	8006b40 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9bf 	bl	8006e9a <USBD_CtlSendStatus>
      break;
 8006b1c:	e010      	b.n	8006b40 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9bb 	bl	8006e9a <USBD_CtlSendStatus>
      break;
 8006b24:	e00c      	b.n	8006b40 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f8eb 	bl	8006d04 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <USBD_SetConfig+0x148>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff f8f7 	bl	8005d28 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b3e:	bf00      	nop
  }

  return ret;
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2000019c 	.word	0x2000019c

08006b50 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d004      	beq.n	8006b6c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8cd 	bl	8006d04 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b6a:	e023      	b.n	8006bb4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	dc02      	bgt.n	8006b7e <USBD_GetConfig+0x2e>
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dc03      	bgt.n	8006b84 <USBD_GetConfig+0x34>
 8006b7c:	e015      	b.n	8006baa <USBD_GetConfig+0x5a>
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d00b      	beq.n	8006b9a <USBD_GetConfig+0x4a>
 8006b82:	e012      	b.n	8006baa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	2201      	movs	r2, #1
 8006b90:	4619      	mov	r1, r3
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f927 	bl	8006de6 <USBD_CtlSendData>
        break;
 8006b98:	e00c      	b.n	8006bb4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f91f 	bl	8006de6 <USBD_CtlSendData>
        break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8a9 	bl	8006d04 <USBD_CtlError>
        break;
 8006bb2:	bf00      	nop
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d81e      	bhi.n	8006c12 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	88db      	ldrh	r3, [r3, #6]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d004      	beq.n	8006be6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006bdc:	6839      	ldr	r1, [r7, #0]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f890 	bl	8006d04 <USBD_CtlError>
        break;
 8006be4:	e01a      	b.n	8006c1c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f043 0202 	orr.w	r2, r3, #2
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	330c      	adds	r3, #12
 8006c06:	2202      	movs	r2, #2
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f8eb 	bl	8006de6 <USBD_CtlSendData>
      break;
 8006c10:	e004      	b.n	8006c1c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f875 	bl	8006d04 <USBD_CtlError>
      break;
 8006c1a:	bf00      	nop
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d106      	bne.n	8006c44 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f92b 	bl	8006e9a <USBD_CtlSendStatus>
  }
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d80b      	bhi.n	8006c7c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	885b      	ldrh	r3, [r3, #2]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d10c      	bne.n	8006c86 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f910 	bl	8006e9a <USBD_CtlSendStatus>
      }
      break;
 8006c7a:	e004      	b.n	8006c86 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f840 	bl	8006d04 <USBD_CtlError>
      break;
 8006c84:	e000      	b.n	8006c88 <USBD_ClrFeature+0x3c>
      break;
 8006c86:	bf00      	nop
  }
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	781a      	ldrb	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fabb 	bl	8006236 <SWAPBYTE>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff faae 	bl	8006236 <SWAPBYTE>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	461a      	mov	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f7ff faa1 	bl	8006236 <SWAPBYTE>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	80da      	strh	r2, [r3, #6]
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d0e:	2180      	movs	r1, #128	; 0x80
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fcf7 	bl	8007704 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcf3 	bl	8007704 <USBD_LL_StallEP>
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d036      	beq.n	8006daa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d40:	6938      	ldr	r0, [r7, #16]
 8006d42:	f000 f836 	bl	8006db2 <USBD_GetLen>
 8006d46:	4603      	mov	r3, r0
 8006d48:	3301      	adds	r3, #1
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	4413      	add	r3, r2
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	3301      	adds	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	2203      	movs	r2, #3
 8006d6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	3301      	adds	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006d76:	e013      	b.n	8006da0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	613b      	str	r3, [r7, #16]
    idx++;
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	4413      	add	r3, r2
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e7      	bne.n	8006d78 <USBD_GetString+0x52>
 8006da8:	e000      	b.n	8006dac <USBD_GetString+0x86>
    return;
 8006daa:	bf00      	nop
  }
}
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006dc2:	e005      	b.n	8006dd0 <USBD_GetLen+0x1e>
  {
    len++;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1f5      	bne.n	8006dc4 <USBD_GetLen+0x12>
  }

  return len;
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2202      	movs	r2, #2
 8006df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fd02 	bl	8007816 <USBD_LL_Transmit>

  return USBD_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fcf1 	bl	8007816 <USBD_LL_Transmit>

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	2100      	movs	r1, #0
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 fcf5 	bl	8007858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	2100      	movs	r1, #0
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fce4 	bl	8007858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2200      	movs	r2, #0
 8006eae:	2100      	movs	r1, #0
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fcb0 	bl	8007816 <USBD_LL_Transmit>

  return USBD_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2205      	movs	r2, #5
 8006ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fcbe 	bl	8007858 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006eec:	2200      	movs	r2, #0
 8006eee:	4912      	ldr	r1, [pc, #72]	; (8006f38 <MX_USB_DEVICE_Init+0x50>)
 8006ef0:	4812      	ldr	r0, [pc, #72]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006ef2:	f7fe fe8f 	bl	8005c14 <USBD_Init>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006efc:	f7f9 fdc6 	bl	8000a8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f00:	490f      	ldr	r1, [pc, #60]	; (8006f40 <MX_USB_DEVICE_Init+0x58>)
 8006f02:	480e      	ldr	r0, [pc, #56]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006f04:	f7fe feb6 	bl	8005c74 <USBD_RegisterClass>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f0e:	f7f9 fdbd 	bl	8000a8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f12:	490c      	ldr	r1, [pc, #48]	; (8006f44 <MX_USB_DEVICE_Init+0x5c>)
 8006f14:	4809      	ldr	r0, [pc, #36]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006f16:	f7fe fdd7 	bl	8005ac8 <USBD_CDC_RegisterInterface>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f20:	f7f9 fdb4 	bl	8000a8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f24:	4805      	ldr	r0, [pc, #20]	; (8006f3c <MX_USB_DEVICE_Init+0x54>)
 8006f26:	f7fe fecc 	bl	8005cc2 <USBD_Start>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f30:	f7f9 fdac 	bl	8000a8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f34:	bf00      	nop
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20000130 	.word	0x20000130
 8006f3c:	200004b8 	.word	0x200004b8
 8006f40:	20000018 	.word	0x20000018
 8006f44:	2000011c 	.word	0x2000011c

08006f48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4905      	ldr	r1, [pc, #20]	; (8006f64 <CDC_Init_FS+0x1c>)
 8006f50:	4805      	ldr	r0, [pc, #20]	; (8006f68 <CDC_Init_FS+0x20>)
 8006f52:	f7fe fdce 	bl	8005af2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f56:	4905      	ldr	r1, [pc, #20]	; (8006f6c <CDC_Init_FS+0x24>)
 8006f58:	4803      	ldr	r0, [pc, #12]	; (8006f68 <CDC_Init_FS+0x20>)
 8006f5a:	f7fe fde8 	bl	8005b2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006f5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20000f88 	.word	0x20000f88
 8006f68:	200004b8 	.word	0x200004b8
 8006f6c:	20000788 	.word	0x20000788

08006f70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006f74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	71fb      	strb	r3, [r7, #7]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b23      	cmp	r3, #35	; 0x23
 8006f94:	d84a      	bhi.n	800702c <CDC_Control_FS+0xac>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <CDC_Control_FS+0x1c>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	0800702d 	.word	0x0800702d
 8006fa0:	0800702d 	.word	0x0800702d
 8006fa4:	0800702d 	.word	0x0800702d
 8006fa8:	0800702d 	.word	0x0800702d
 8006fac:	0800702d 	.word	0x0800702d
 8006fb0:	0800702d 	.word	0x0800702d
 8006fb4:	0800702d 	.word	0x0800702d
 8006fb8:	0800702d 	.word	0x0800702d
 8006fbc:	0800702d 	.word	0x0800702d
 8006fc0:	0800702d 	.word	0x0800702d
 8006fc4:	0800702d 	.word	0x0800702d
 8006fc8:	0800702d 	.word	0x0800702d
 8006fcc:	0800702d 	.word	0x0800702d
 8006fd0:	0800702d 	.word	0x0800702d
 8006fd4:	0800702d 	.word	0x0800702d
 8006fd8:	0800702d 	.word	0x0800702d
 8006fdc:	0800702d 	.word	0x0800702d
 8006fe0:	0800702d 	.word	0x0800702d
 8006fe4:	0800702d 	.word	0x0800702d
 8006fe8:	0800702d 	.word	0x0800702d
 8006fec:	0800702d 	.word	0x0800702d
 8006ff0:	0800702d 	.word	0x0800702d
 8006ff4:	0800702d 	.word	0x0800702d
 8006ff8:	0800702d 	.word	0x0800702d
 8006ffc:	0800702d 	.word	0x0800702d
 8007000:	0800702d 	.word	0x0800702d
 8007004:	0800702d 	.word	0x0800702d
 8007008:	0800702d 	.word	0x0800702d
 800700c:	0800702d 	.word	0x0800702d
 8007010:	0800702d 	.word	0x0800702d
 8007014:	0800702d 	.word	0x0800702d
 8007018:	0800702d 	.word	0x0800702d
 800701c:	0800702d 	.word	0x0800702d
 8007020:	0800702d 	.word	0x0800702d
 8007024:	0800702d 	.word	0x0800702d
 8007028:	0800702d 	.word	0x0800702d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800702c:	bf00      	nop
  }

  return (USBD_OK);
 800702e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4805      	ldr	r0, [pc, #20]	; (8007060 <CDC_Receive_FS+0x24>)
 800704a:	f7fe fd70 	bl	8005b2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800704e:	4804      	ldr	r0, [pc, #16]	; (8007060 <CDC_Receive_FS+0x24>)
 8007050:	f7fe fdb6 	bl	8005bc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007054:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	200004b8 	.word	0x200004b8

08007064 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007070:	2300      	movs	r3, #0
 8007072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  memcpy(UserTxBufferFS,Buf,sizeof(char)*Len);
 8007074:	887b      	ldrh	r3, [r7, #2]
 8007076:	461a      	mov	r2, r3
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	480f      	ldr	r0, [pc, #60]	; (80070b8 <CDC_Transmit_FS+0x54>)
 800707c:	f000 fc88 	bl	8007990 <memcpy>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007080:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <CDC_Transmit_FS+0x58>)
 8007082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007086:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <CDC_Transmit_FS+0x32>
    return USBD_BUSY;
 8007092:	2301      	movs	r3, #1
 8007094:	e00b      	b.n	80070ae <CDC_Transmit_FS+0x4a>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007096:	887b      	ldrh	r3, [r7, #2]
 8007098:	461a      	mov	r2, r3
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4807      	ldr	r0, [pc, #28]	; (80070bc <CDC_Transmit_FS+0x58>)
 800709e:	f7fe fd28 	bl	8005af2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070a2:	4806      	ldr	r0, [pc, #24]	; (80070bc <CDC_Transmit_FS+0x58>)
 80070a4:	f7fe fd5c 	bl	8005b60 <USBD_CDC_TransmitPacket>
 80070a8:	4603      	mov	r3, r0
 80070aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000f88 	.word	0x20000f88
 80070bc:	200004b8 	.word	0x200004b8

080070c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80070d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	6039      	str	r1, [r7, #0]
 80070ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	2212      	movs	r2, #18
 80070f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070f6:	4b03      	ldr	r3, [pc, #12]	; (8007104 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	2000014c 	.word	0x2000014c

08007108 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007108:	b480      	push	{r7}
 800710a:	b083      	sub	sp, #12
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	6039      	str	r1, [r7, #0]
 8007112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2204      	movs	r2, #4
 8007118:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800711a:	4b03      	ldr	r3, [pc, #12]	; (8007128 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	20000160 	.word	0x20000160

0800712c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	6039      	str	r1, [r7, #0]
 8007136:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d105      	bne.n	800714a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	4907      	ldr	r1, [pc, #28]	; (8007160 <USBD_FS_ProductStrDescriptor+0x34>)
 8007142:	4808      	ldr	r0, [pc, #32]	; (8007164 <USBD_FS_ProductStrDescriptor+0x38>)
 8007144:	f7ff fdef 	bl	8006d26 <USBD_GetString>
 8007148:	e004      	b.n	8007154 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	4904      	ldr	r1, [pc, #16]	; (8007160 <USBD_FS_ProductStrDescriptor+0x34>)
 800714e:	4805      	ldr	r0, [pc, #20]	; (8007164 <USBD_FS_ProductStrDescriptor+0x38>)
 8007150:	f7ff fde9 	bl	8006d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007154:	4b02      	ldr	r3, [pc, #8]	; (8007160 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20001788 	.word	0x20001788
 8007164:	080079e8 	.word	0x080079e8

08007168 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	4904      	ldr	r1, [pc, #16]	; (8007188 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007178:	4804      	ldr	r0, [pc, #16]	; (800718c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800717a:	f7ff fdd4 	bl	8006d26 <USBD_GetString>
  return USBD_StrDesc;
 800717e:	4b02      	ldr	r3, [pc, #8]	; (8007188 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20001788 	.word	0x20001788
 800718c:	08007a00 	.word	0x08007a00

08007190 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	221a      	movs	r2, #26
 80071a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80071a2:	f000 f843 	bl	800722c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80071a6:	4b02      	ldr	r3, [pc, #8]	; (80071b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20000164 	.word	0x20000164

080071b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4603      	mov	r3, r0
 80071bc:	6039      	str	r1, [r7, #0]
 80071be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d105      	bne.n	80071d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	4907      	ldr	r1, [pc, #28]	; (80071e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071ca:	4808      	ldr	r0, [pc, #32]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80071cc:	f7ff fdab 	bl	8006d26 <USBD_GetString>
 80071d0:	e004      	b.n	80071dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	4904      	ldr	r1, [pc, #16]	; (80071e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071d6:	4805      	ldr	r0, [pc, #20]	; (80071ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80071d8:	f7ff fda5 	bl	8006d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071dc:	4b02      	ldr	r3, [pc, #8]	; (80071e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20001788 	.word	0x20001788
 80071ec:	08007a14 	.word	0x08007a14

080071f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071fc:	79fb      	ldrb	r3, [r7, #7]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d105      	bne.n	800720e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	4907      	ldr	r1, [pc, #28]	; (8007224 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007206:	4808      	ldr	r0, [pc, #32]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007208:	f7ff fd8d 	bl	8006d26 <USBD_GetString>
 800720c:	e004      	b.n	8007218 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	4904      	ldr	r1, [pc, #16]	; (8007224 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007212:	4805      	ldr	r0, [pc, #20]	; (8007228 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007214:	f7ff fd87 	bl	8006d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20001788 	.word	0x20001788
 8007228:	08007a20 	.word	0x08007a20

0800722c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007232:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <Get_SerialNum+0x44>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007238:	4b0e      	ldr	r3, [pc, #56]	; (8007274 <Get_SerialNum+0x48>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800723e:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <Get_SerialNum+0x4c>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4413      	add	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007252:	2208      	movs	r2, #8
 8007254:	4909      	ldr	r1, [pc, #36]	; (800727c <Get_SerialNum+0x50>)
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f814 	bl	8007284 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800725c:	2204      	movs	r2, #4
 800725e:	4908      	ldr	r1, [pc, #32]	; (8007280 <Get_SerialNum+0x54>)
 8007260:	68b8      	ldr	r0, [r7, #8]
 8007262:	f000 f80f 	bl	8007284 <IntToUnicode>
  }
}
 8007266:	bf00      	nop
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	1fff7a10 	.word	0x1fff7a10
 8007274:	1fff7a14 	.word	0x1fff7a14
 8007278:	1fff7a18 	.word	0x1fff7a18
 800727c:	20000166 	.word	0x20000166
 8007280:	20000176 	.word	0x20000176

08007284 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007296:	2300      	movs	r3, #0
 8007298:	75fb      	strb	r3, [r7, #23]
 800729a:	e027      	b.n	80072ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	0f1b      	lsrs	r3, r3, #28
 80072a0:	2b09      	cmp	r3, #9
 80072a2:	d80b      	bhi.n	80072bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	0f1b      	lsrs	r3, r3, #28
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4619      	mov	r1, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	440b      	add	r3, r1
 80072b4:	3230      	adds	r2, #48	; 0x30
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	e00a      	b.n	80072d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	0f1b      	lsrs	r3, r3, #28
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	4619      	mov	r1, r3
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	440b      	add	r3, r1
 80072cc:	3237      	adds	r2, #55	; 0x37
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	3301      	adds	r3, #1
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	4413      	add	r3, r2
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	3301      	adds	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]
 80072ec:	7dfa      	ldrb	r2, [r7, #23]
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d3d3      	bcc.n	800729c <IntToUnicode+0x18>
  }
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	371c      	adds	r7, #28
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
	...

08007304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800730c:	f107 0314 	add.w	r3, r7, #20
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	605a      	str	r2, [r3, #4]
 8007316:	609a      	str	r2, [r3, #8]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007324:	d147      	bne.n	80073b6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007326:	2300      	movs	r3, #0
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	6313      	str	r3, [r2, #48]	; 0x30
 8007336:	4b22      	ldr	r3, [pc, #136]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007348:	2300      	movs	r3, #0
 800734a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734c:	2300      	movs	r3, #0
 800734e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007350:	f107 0314 	add.w	r3, r7, #20
 8007354:	4619      	mov	r1, r3
 8007356:	481b      	ldr	r0, [pc, #108]	; (80073c4 <HAL_PCD_MspInit+0xc0>)
 8007358:	f7f9 fe5c 	bl	8001014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800735c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007362:	2302      	movs	r3, #2
 8007364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007366:	2300      	movs	r3, #0
 8007368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800736a:	2300      	movs	r3, #0
 800736c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800736e:	230a      	movs	r3, #10
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007372:	f107 0314 	add.w	r3, r7, #20
 8007376:	4619      	mov	r1, r3
 8007378:	4812      	ldr	r0, [pc, #72]	; (80073c4 <HAL_PCD_MspInit+0xc0>)
 800737a:	f7f9 fe4b 	bl	8001014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800737e:	4b10      	ldr	r3, [pc, #64]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 8007380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007382:	4a0f      	ldr	r2, [pc, #60]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 8007384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007388:	6353      	str	r3, [r2, #52]	; 0x34
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 8007390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007392:	4a0b      	ldr	r2, [pc, #44]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 8007394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007398:	6453      	str	r3, [r2, #68]	; 0x44
 800739a:	4b09      	ldr	r3, [pc, #36]	; (80073c0 <HAL_PCD_MspInit+0xbc>)
 800739c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073a6:	2200      	movs	r2, #0
 80073a8:	2100      	movs	r1, #0
 80073aa:	2043      	movs	r0, #67	; 0x43
 80073ac:	f7f9 fdfb 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073b0:	2043      	movs	r0, #67	; 0x43
 80073b2:	f7f9 fe14 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073b6:	bf00      	nop
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40023800 	.word	0x40023800
 80073c4:	40020000 	.word	0x40020000

080073c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f7fe fcba 	bl	8005d58 <USBD_LL_SetupStage>
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	4613      	mov	r3, r2
 8007404:	00db      	lsls	r3, r3, #3
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	4619      	mov	r1, r3
 8007416:	f7fe fcf4 	bl	8005e02 <USBD_LL_DataOutStage>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	460b      	mov	r3, r1
 800742c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	4613      	mov	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3348      	adds	r3, #72	; 0x48
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	4619      	mov	r1, r3
 800744a:	f7fe fd3d 	bl	8005ec8 <USBD_LL_DataInStage>
}
 800744e:	bf00      	nop
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007464:	4618      	mov	r0, r3
 8007466:	f7fe fe51 	bl	800610c <USBD_LL_SOF>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800747a:	2301      	movs	r3, #1
 800747c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d102      	bne.n	800748c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007486:	2300      	movs	r3, #0
 8007488:	73fb      	strb	r3, [r7, #15]
 800748a:	e008      	b.n	800749e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	2b02      	cmp	r3, #2
 8007492:	d102      	bne.n	800749a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e001      	b.n	800749e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800749a:	f7f9 faf7 	bl	8000a8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074a4:	7bfa      	ldrb	r2, [r7, #15]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe fdf1 	bl	8006090 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe fd9d 	bl	8005ff4 <USBD_LL_Reset>
}
 80074ba:	bf00      	nop
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fdec 	bl	80060b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074ea:	f043 0301 	orr.w	r3, r3, #1
 80074ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <HAL_PCD_SuspendCallback+0x48>)
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	4a03      	ldr	r2, [pc, #12]	; (800750c <HAL_PCD_SuspendCallback+0x48>)
 80074fe:	f043 0306 	orr.w	r3, r3, #6
 8007502:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	e000ed00 	.word	0xe000ed00

08007510 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fddc 	bl	80060dc <USBD_LL_Resume>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fe2a 	bl	800619c <USBD_LL_IsoOUTIncomplete>
}
 8007548:	bf00      	nop
 800754a:	3708      	adds	r7, #8
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	4611      	mov	r1, r2
 8007566:	4618      	mov	r0, r3
 8007568:	f7fe fdf2 	bl	8006150 <USBD_LL_IsoINIncomplete>
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fe30 	bl	80061e8 <USBD_LL_DevConnected>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe fe2d 	bl	80061fe <USBD_LL_DevDisconnected>
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d13c      	bne.n	8007636 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075bc:	4a20      	ldr	r2, [pc, #128]	; (8007640 <USBD_LL_Init+0x94>)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1e      	ldr	r2, [pc, #120]	; (8007640 <USBD_LL_Init+0x94>)
 80075c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075cc:	4b1c      	ldr	r3, [pc, #112]	; (8007640 <USBD_LL_Init+0x94>)
 80075ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <USBD_LL_Init+0x94>)
 80075d6:	2204      	movs	r2, #4
 80075d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80075da:	4b19      	ldr	r3, [pc, #100]	; (8007640 <USBD_LL_Init+0x94>)
 80075dc:	2202      	movs	r2, #2
 80075de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075e0:	4b17      	ldr	r3, [pc, #92]	; (8007640 <USBD_LL_Init+0x94>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80075e6:	4b16      	ldr	r3, [pc, #88]	; (8007640 <USBD_LL_Init+0x94>)
 80075e8:	2202      	movs	r2, #2
 80075ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075ec:	4b14      	ldr	r3, [pc, #80]	; (8007640 <USBD_LL_Init+0x94>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80075f2:	4b13      	ldr	r3, [pc, #76]	; (8007640 <USBD_LL_Init+0x94>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <USBD_LL_Init+0x94>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80075fe:	4b10      	ldr	r3, [pc, #64]	; (8007640 <USBD_LL_Init+0x94>)
 8007600:	2201      	movs	r2, #1
 8007602:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <USBD_LL_Init+0x94>)
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800760a:	480d      	ldr	r0, [pc, #52]	; (8007640 <USBD_LL_Init+0x94>)
 800760c:	f7fa fcb6 	bl	8001f7c <HAL_PCD_Init>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007616:	f7f9 fa39 	bl	8000a8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800761a:	2180      	movs	r1, #128	; 0x80
 800761c:	4808      	ldr	r0, [pc, #32]	; (8007640 <USBD_LL_Init+0x94>)
 800761e:	f7fb fe14 	bl	800324a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007622:	2240      	movs	r2, #64	; 0x40
 8007624:	2100      	movs	r1, #0
 8007626:	4806      	ldr	r0, [pc, #24]	; (8007640 <USBD_LL_Init+0x94>)
 8007628:	f7fb fdc8 	bl	80031bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800762c:	2280      	movs	r2, #128	; 0x80
 800762e:	2101      	movs	r1, #1
 8007630:	4803      	ldr	r0, [pc, #12]	; (8007640 <USBD_LL_Init+0x94>)
 8007632:	f7fb fdc3 	bl	80031bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20001988 	.word	0x20001988

08007644 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800765a:	4618      	mov	r0, r3
 800765c:	f7fa fdab 	bl	80021b6 <HAL_PCD_Start>
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007664:	7bfb      	ldrb	r3, [r7, #15]
 8007666:	4618      	mov	r0, r3
 8007668:	f000 f942 	bl	80078f0 <USBD_Get_USB_Status>
 800766c:	4603      	mov	r3, r0
 800766e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007670:	7bbb      	ldrb	r3, [r7, #14]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	4608      	mov	r0, r1
 8007684:	4611      	mov	r1, r2
 8007686:	461a      	mov	r2, r3
 8007688:	4603      	mov	r3, r0
 800768a:	70fb      	strb	r3, [r7, #3]
 800768c:	460b      	mov	r3, r1
 800768e:	70bb      	strb	r3, [r7, #2]
 8007690:	4613      	mov	r3, r2
 8007692:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076a2:	78bb      	ldrb	r3, [r7, #2]
 80076a4:	883a      	ldrh	r2, [r7, #0]
 80076a6:	78f9      	ldrb	r1, [r7, #3]
 80076a8:	f7fb f98f 	bl	80029ca <HAL_PCD_EP_Open>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f91c 	bl	80078f0 <USBD_Get_USB_Status>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fb f9d8 	bl	8002a9a <HAL_PCD_EP_Close>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 f8fd 	bl	80078f0 <USBD_Get_USB_Status>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007714:	2300      	movs	r3, #0
 8007716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	4611      	mov	r1, r2
 8007722:	4618      	mov	r0, r3
 8007724:	f7fb fab0 	bl	8002c88 <HAL_PCD_EP_SetStall>
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f8de 	bl	80078f0 <USBD_Get_USB_Status>
 8007734:	4603      	mov	r3, r0
 8007736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007738:	7bbb      	ldrb	r3, [r7, #14]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	4611      	mov	r1, r2
 8007760:	4618      	mov	r0, r3
 8007762:	f7fb faf5 	bl	8002d50 <HAL_PCD_EP_ClrStall>
 8007766:	4603      	mov	r3, r0
 8007768:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	4618      	mov	r0, r3
 800776e:	f000 f8bf 	bl	80078f0 <USBD_Get_USB_Status>
 8007772:	4603      	mov	r3, r0
 8007774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007776:	7bbb      	ldrb	r3, [r7, #14]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	460b      	mov	r3, r1
 800778a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007792:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007798:	2b00      	cmp	r3, #0
 800779a:	da0b      	bge.n	80077b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	4613      	mov	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	1a9b      	subs	r3, r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	333e      	adds	r3, #62	; 0x3e
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	e00b      	b.n	80077cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ba:	68f9      	ldr	r1, [r7, #12]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fb f8c2 	bl	8002980 <HAL_PCD_SetAddress>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f874 	bl	80078f0 <USBD_Get_USB_Status>
 8007808:	4603      	mov	r3, r0
 800780a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800780c:	7bbb      	ldrb	r3, [r7, #14]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b086      	sub	sp, #24
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
 8007822:	460b      	mov	r3, r1
 8007824:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007834:	7af9      	ldrb	r1, [r7, #11]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	f7fb f9db 	bl	8002bf4 <HAL_PCD_EP_Transmit>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 f853 	bl	80078f0 <USBD_Get_USB_Status>
 800784a:	4603      	mov	r3, r0
 800784c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800784e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	460b      	mov	r3, r1
 8007866:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007868:	2300      	movs	r3, #0
 800786a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007876:	7af9      	ldrb	r1, [r7, #11]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	f7fb f957 	bl	8002b2e <HAL_PCD_EP_Receive>
 8007880:	4603      	mov	r3, r0
 8007882:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f832 	bl	80078f0 <USBD_Get_USB_Status>
 800788c:	4603      	mov	r3, r0
 800788e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007890:	7dbb      	ldrb	r3, [r7, #22]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	460b      	mov	r3, r1
 80078a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fb f987 	bl	8002bc4 <HAL_PCD_EP_GetRxCount>
 80078b6:	4603      	mov	r3, r0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078c8:	4b03      	ldr	r3, [pc, #12]	; (80078d8 <USBD_static_malloc+0x18>)
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	200001a0 	.word	0x200001a0

080078dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]

}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d817      	bhi.n	8007934 <USBD_Get_USB_Status+0x44>
 8007904:	a201      	add	r2, pc, #4	; (adr r2, 800790c <USBD_Get_USB_Status+0x1c>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	0800791d 	.word	0x0800791d
 8007910:	08007923 	.word	0x08007923
 8007914:	08007929 	.word	0x08007929
 8007918:	0800792f 	.word	0x0800792f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
    break;
 8007920:	e00b      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007922:	2303      	movs	r3, #3
 8007924:	73fb      	strb	r3, [r7, #15]
    break;
 8007926:	e008      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007928:	2301      	movs	r3, #1
 800792a:	73fb      	strb	r3, [r7, #15]
    break;
 800792c:	e005      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800792e:	2303      	movs	r3, #3
 8007930:	73fb      	strb	r3, [r7, #15]
    break;
 8007932:	e002      	b.n	800793a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007934:	2303      	movs	r3, #3
 8007936:	73fb      	strb	r3, [r7, #15]
    break;
 8007938:	bf00      	nop
  }
  return usb_status;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <__libc_init_array>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4d0d      	ldr	r5, [pc, #52]	; (8007980 <__libc_init_array+0x38>)
 800794c:	4c0d      	ldr	r4, [pc, #52]	; (8007984 <__libc_init_array+0x3c>)
 800794e:	1b64      	subs	r4, r4, r5
 8007950:	10a4      	asrs	r4, r4, #2
 8007952:	2600      	movs	r6, #0
 8007954:	42a6      	cmp	r6, r4
 8007956:	d109      	bne.n	800796c <__libc_init_array+0x24>
 8007958:	4d0b      	ldr	r5, [pc, #44]	; (8007988 <__libc_init_array+0x40>)
 800795a:	4c0c      	ldr	r4, [pc, #48]	; (800798c <__libc_init_array+0x44>)
 800795c:	f000 f82e 	bl	80079bc <_init>
 8007960:	1b64      	subs	r4, r4, r5
 8007962:	10a4      	asrs	r4, r4, #2
 8007964:	2600      	movs	r6, #0
 8007966:	42a6      	cmp	r6, r4
 8007968:	d105      	bne.n	8007976 <__libc_init_array+0x2e>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007970:	4798      	blx	r3
 8007972:	3601      	adds	r6, #1
 8007974:	e7ee      	b.n	8007954 <__libc_init_array+0xc>
 8007976:	f855 3b04 	ldr.w	r3, [r5], #4
 800797a:	4798      	blx	r3
 800797c:	3601      	adds	r6, #1
 800797e:	e7f2      	b.n	8007966 <__libc_init_array+0x1e>
 8007980:	08007a50 	.word	0x08007a50
 8007984:	08007a50 	.word	0x08007a50
 8007988:	08007a50 	.word	0x08007a50
 800798c:	08007a54 	.word	0x08007a54

08007990 <memcpy>:
 8007990:	440a      	add	r2, r1
 8007992:	4291      	cmp	r1, r2
 8007994:	f100 33ff 	add.w	r3, r0, #4294967295
 8007998:	d100      	bne.n	800799c <memcpy+0xc>
 800799a:	4770      	bx	lr
 800799c:	b510      	push	{r4, lr}
 800799e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a6:	4291      	cmp	r1, r2
 80079a8:	d1f9      	bne.n	800799e <memcpy+0xe>
 80079aa:	bd10      	pop	{r4, pc}

080079ac <memset>:
 80079ac:	4402      	add	r2, r0
 80079ae:	4603      	mov	r3, r0
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d100      	bne.n	80079b6 <memset+0xa>
 80079b4:	4770      	bx	lr
 80079b6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ba:	e7f9      	b.n	80079b0 <memset+0x4>

080079bc <_init>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr

080079c8 <_fini>:
 80079c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ca:	bf00      	nop
 80079cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ce:	bc08      	pop	{r3}
 80079d0:	469e      	mov	lr, r3
 80079d2:	4770      	bx	lr
